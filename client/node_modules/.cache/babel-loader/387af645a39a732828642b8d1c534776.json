{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\ToolsBar\\\\SaveImage\\\\SaveImage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport classes from \"./SaveImage.module.css\";\nimport { ArtsContext } from \"../../../context/arts-context\";\nimport { SettingsContext } from \"../../../context/settings-context\";\nimport { createCanvas } from \"canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SaveImage = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts\n  } = useContext(ArtsContext);\n  const [canvas, setCanvas] = useState(null); // const [img, setImg] = useState<null | Art>(null);\n  // const socket = useRef<null | WebSocket>(null);\n  // useEffect(() => {\n  //   const s = new WebSocket(\"ws://localhost:3001\");\n  //   s.onopen = (e) => {\n  //     console.log(\"connection\");\n  //   };\n  //   s.onmessage = function (e) {\n  //     alert(\"Img is ready\");\n  //   };\n  //   socket.current = s;\n  // }, []);\n\n  const onSaveImage = e => {\n    e.preventDefault();\n    const img = arts.arts.find(art => art.id === arts.chosen);\n    const rs = settings.rowSize;\n    const cs = settings.columnSize;\n    const canvasWidth = 10 * cs;\n    const canvasHeight = 10 * rs;\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    const context = canvas.getContext(\"2d\");\n\n    for (let i = 0; i < rs; i++) {\n      for (let j = 0; j < cs; j++) {\n        context.fillStyle = img.rows[i][j].color === settings.defColor ? \"transparent\" : img.rows[i][j].color;\n        context.fillRect(j * 10, i * 10, 10, 10);\n      }\n    }\n\n    setCanvas(canvas); // const url = \"../src/assets/images/kojima.jpg\";\n    // loadImage(url).then((image) => {\n    //   console.log(image);\n    //   context.drawImage(image, 0, 0);\n    // });\n    // socket.current!.send(\n    //   JSON.stringify({\n    //     img: art,\n    //     cs: settings!.columnSize,\n    //     rs: settings!.rowSize,\n    //     dc: settings!.defColor,\n    //   })\n    // );\n    // setImg(art);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSaveImage,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: classes.SaveImage,\n      children: \"SAVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SaveImage, \"H/xn4vHRpOncJ2fTsWEMRlYb0Yk=\");\n\n_c = SaveImage;\nexport default SaveImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveImage\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/ToolsBar/SaveImage/SaveImage.tsx"],"names":["useContext","useState","classes","ArtsContext","SettingsContext","createCanvas","SaveImage","settings","arts","canvas","setCanvas","onSaveImage","e","preventDefault","img","find","art","id","chosen","rs","rowSize","cs","columnSize","canvasWidth","canvasHeight","context","getContext","i","j","fillStyle","rows","color","defColor","fillRect"],"mappings":";;;AAAA,SAGEA,UAHF,EAMEC,QANF,QAOO,OAPP;AASA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAcC,WAAd,QAAiC,+BAAjC;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,YAAT,QAAwC,QAAxC;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAeP,UAAU,CAACI,eAAD,CAA/B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWR,UAAU,CAACG,WAAD,CAA3B;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAa,IAAb,CAApC,CAHsB,CAItB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMU,WAA6B,GAAIC,CAAD,IAAO;AAC3CA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,GAAG,GAAGN,IAAI,CAACA,IAAL,CAAUO,IAAV,CAAgBC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAWT,IAAI,CAACU,MAAxC,CAAZ;AAEA,UAAMC,EAAE,GAAGZ,QAAQ,CAAEa,OAArB;AACA,UAAMC,EAAE,GAAGd,QAAQ,CAAEe,UAArB;AAEA,UAAMC,WAAW,GAAG,KAAKF,EAAzB;AACA,UAAMG,YAAY,GAAG,KAAKL,EAA1B;AAEA,UAAMV,MAAM,GAAGJ,YAAY,CAACkB,WAAD,EAAcC,YAAd,CAA3B;AACA,UAAMC,OAAO,GAAGhB,MAAM,CAACiB,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,EAApB,EAAwBQ,CAAC,EAAzB,EAA6B;AAC3B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,EAApB,EAAwBO,CAAC,EAAzB,EAA6B;AAC3BH,QAAAA,OAAO,CAACI,SAAR,GACEf,GAAG,CAACgB,IAAJ,CAASH,CAAT,EAAYC,CAAZ,EAAeG,KAAf,KAAyBxB,QAAQ,CAAEyB,QAAnC,GACI,aADJ,GAEIlB,GAAG,CAACgB,IAAJ,CAASH,CAAT,EAAYC,CAAZ,EAAeG,KAHrB;AAIAN,QAAAA,OAAO,CAACQ,QAAR,CAAiBL,CAAC,GAAG,EAArB,EAAyBD,CAAC,GAAG,EAA7B,EAAiC,EAAjC,EAAqC,EAArC;AACD;AACF;;AACDjB,IAAAA,SAAS,CAACD,MAAD,CAAT,CAtB2C,CAuB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GArCD;;AAuCA,sBACE;AAAM,IAAA,QAAQ,EAAEE,WAAhB;AAAA,2BACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAET,OAAO,CAACI,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApED;;GAAMA,S;;KAAAA,S;AAsEN,eAAeA,SAAf","sourcesContent":["import {\r\n  FormEventHandler,\r\n  MutableRefObject,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport classes from \"./SaveImage.module.css\";\r\nimport { Art, ArtsContext } from \"../../../context/arts-context\";\r\nimport { SettingsContext } from \"../../../context/settings-context\";\r\nimport { createCanvas, loadImage } from \"canvas\";\r\n\r\nconst SaveImage = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts } = useContext(ArtsContext)!;\r\n  const [canvas, setCanvas] = useState<null | any>(null);\r\n  // const [img, setImg] = useState<null | Art>(null);\r\n  // const socket = useRef<null | WebSocket>(null);\r\n\r\n  // useEffect(() => {\r\n  //   const s = new WebSocket(\"ws://localhost:3001\");\r\n  //   s.onopen = (e) => {\r\n  //     console.log(\"connection\");\r\n  //   };\r\n  //   s.onmessage = function (e) {\r\n  //     alert(\"Img is ready\");\r\n  //   };\r\n  //   socket.current = s;\r\n  // }, []);\r\n\r\n  const onSaveImage: FormEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const img = arts.arts.find((art) => art.id === arts.chosen)!;\r\n\r\n    const rs = settings!.rowSize;\r\n    const cs = settings!.columnSize;\r\n\r\n    const canvasWidth = 10 * cs;\r\n    const canvasHeight = 10 * rs;\r\n\r\n    const canvas = createCanvas(canvasWidth, canvasHeight);\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    for (let i = 0; i < rs; i++) {\r\n      for (let j = 0; j < cs; j++) {\r\n        context.fillStyle =\r\n          img.rows[i][j].color === settings!.defColor\r\n            ? \"transparent\"\r\n            : img.rows[i][j].color;\r\n        context.fillRect(j * 10, i * 10, 10, 10);\r\n      }\r\n    }\r\n    setCanvas(canvas);\r\n    // const url = \"../src/assets/images/kojima.jpg\";\r\n    // loadImage(url).then((image) => {\r\n    //   console.log(image);\r\n    //   context.drawImage(image, 0, 0);\r\n    // });\r\n    // socket.current!.send(\r\n    //   JSON.stringify({\r\n    //     img: art,\r\n    //     cs: settings!.columnSize,\r\n    //     rs: settings!.rowSize,\r\n    //     dc: settings!.defColor,\r\n    //   })\r\n    // );\r\n    // setImg(art);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSaveImage}>\r\n      <button type=\"submit\" className={classes.SaveImage}>\r\n        SAVE\r\n      </button>\r\n      {/* <input type=\"hidden\" name=\"img\" value={JSON.stringify(img)} />\r\n      <input type=\"hidden\" name=\"cs\" value={settings!.columnSize} />\r\n      <input type=\"hidden\" name=\"rs\" value={settings!.rowSize} />\r\n      <input type=\"hidden\" name=\"dc\" value={settings!.defColor} /> */}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SaveImage;\r\n"]},"metadata":{},"sourceType":"module"}