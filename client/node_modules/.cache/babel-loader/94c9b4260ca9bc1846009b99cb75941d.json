{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const [draggedPixels, setDraggedPixels] = useState(null);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (!arts.chosen) {\n      const board = [];\n\n      for (let i = 0; i < settings.rowSize; i++) {\n        let arr = [];\n\n        for (let j = 0; j < settings.columnSize; j++) {\n          arr.push({\n            xpos: j,\n            ypos: i,\n            color: settings.defColor\n          });\n        }\n\n        board.push(arr);\n      }\n\n      const id = Math.random().toString();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: board,\n          id: id\n        }\n      });\n      artsDispatch({\n        type: \"SET_CHOSEN\",\n        data: id\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const onDragEnd = e => {\n    e.preventDefault();\n    document.removeEventListener(\"dragend\", onDragEnd);\n  };\n\n  const onDragStart = e => {\n    const clone = e.target.cloneNode(true);\n    clone.style.display = \"none\";\n    e.dataTransfer.setDragImage(clone, 0, 0);\n    document.addEventListener(\"dragend\", onDragEnd);\n  };\n\n  const pixelClickedHandler = (xpos, ypos, color) => {\n    return e => {\n      e.preventDefault();\n\n      switch (settings.tool) {\n        case \"BRUSH\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"ERASER\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.defColor,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"FILL\":\n          const art = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n\n          const fillPix = (x, y) => {\n            const checkPix = (xp, yp) => {\n              if (yp > art.rows.length - 1 || yp < 0 || xp > art.rows[yp].length || xp < 0) return false;\n              const pix = art.rows[yp][xp];\n              if (!pix) return false;\n              const colorP = pix.color;\n              return colorP !== settings.color && colorP === color;\n            };\n\n            art.rows[y][x].color = settings.color;\n\n            if (checkPix(x + 1, y)) {\n              fillPix(x + 1, y);\n            }\n\n            if (checkPix(x, y + 1)) {\n              fillPix(x, y + 1);\n            }\n\n            if (checkPix(x, y - 1)) {\n              fillPix(x, y - 1);\n            }\n\n            if (checkPix(x - 1, y)) {\n              fillPix(x - 1, y);\n            }\n          };\n\n          fillPix(xpos, ypos);\n          artsDispatch({\n            type: \"UPD_ART\",\n            artId: arts.chosen,\n            data: art\n          });\n          break;\n\n        case \"PIPETTE\":\n          settingsDispatch({\n            type: \"SET_COLOR\",\n            data: color\n          });\n          break;\n\n        case \"MOVE\":\n          if (!draggedPixels) {\n            return setDraggedPixels({\n              x: 0,\n              y: 0\n            });\n          }\n\n          let x = xpos - draggedPixels.x;\n          let y = ypos - draggedPixels.y;\n          console.log(x, y);\n          x = (x - x % 2) / x;\n          y = (y - y % 2) / y;\n          const newArt = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n          newArt.rows.forEach(row => {\n            row.forEach(pix => {\n              pix.xpos += x === settings.columnSize ? 0 : x < 0 ? settings.columnSize - 1 : x;\n              pix.ypos = y === settings.rowSize ? 0 : y < 0 ? settings.rowSize - 1 : y;\n            });\n          });\n          artsDispatch({\n            type: \"UPD_ART\",\n            data: newArt,\n            artId: arts.chosen\n          });\n          setDraggedPixels(prevState => {\n            return {\n              x: x,\n              y: y\n            };\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = { ...arts.arts.find(art => art.id === arts.chosen)\n    };\n  }\n\n  const ps = (600 + settings.columnSize) / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onDragStart,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"HJ8xxTtYEPS+7jH5DN2Y7THniR8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","useState","Pixel","Board","settings","settingsDispatch","arts","artsDispatch","draggedPixels","setDraggedPixels","boardRef","chosen","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","defColor","id","Math","random","toString","type","data","rows","onDragEnd","e","preventDefault","document","removeEventListener","onDragStart","clone","target","cloneNode","style","display","dataTransfer","setDragImage","addEventListener","pixelClickedHandler","tool","artId","x","y","art","JSON","parse","stringify","find","fillPix","checkPix","xp","yp","length","pix","colorP","console","log","newArt","forEach","row","prevState","ps","map","pixel"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const [draggedPixels, setDraggedPixels] = useState<null | {\r\n    x: number;\r\n    y: number;\r\n  }>(null);\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!arts.chosen) {\r\n      const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n      for (let i = 0; i < settings!.rowSize; i++) {\r\n        let arr = [];\r\n        for (let j = 0; j < settings!.columnSize; j++) {\r\n          arr.push({ xpos: j, ypos: i, color: settings!.defColor });\r\n        }\r\n        board.push(arr);\r\n      }\r\n      const id = Math.random().toString();\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: board,\r\n          id: id,\r\n        },\r\n      });\r\n      artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const onDragEnd: EventListener = (e) => {\r\n    e.preventDefault();\r\n    document.removeEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const onDragStart: DragEventHandler = (e) => {\r\n    const clone = (e.target as HTMLElement).cloneNode(true);\r\n    (clone as HTMLElement).style.display = \"none\";\r\n    e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n    document.addEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number, color: string) => {\r\n    return ((e) => {\r\n      e.preventDefault();\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"ERASER\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.defColor,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"FILL\":\r\n          const art: Art = JSON.parse(\r\n            JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n          );\r\n          const fillPix = (x: number, y: number) => {\r\n            const checkPix = (xp: number, yp: number): boolean => {\r\n              if (\r\n                yp > art.rows.length - 1 ||\r\n                yp < 0 ||\r\n                xp > art.rows[yp].length ||\r\n                xp < 0\r\n              )\r\n                return false;\r\n              const pix = art.rows[yp][xp];\r\n              if (!pix) return false;\r\n              const colorP = pix.color;\r\n              return colorP !== settings!.color && colorP === color;\r\n            };\r\n            art.rows[y][x].color = settings!.color;\r\n\r\n            if (checkPix(x + 1, y)) {\r\n              fillPix(x + 1, y);\r\n            }\r\n            if (checkPix(x, y + 1)) {\r\n              fillPix(x, y + 1);\r\n            }\r\n            if (checkPix(x, y - 1)) {\r\n              fillPix(x, y - 1);\r\n            }\r\n            if (checkPix(x - 1, y)) {\r\n              fillPix(x - 1, y);\r\n            }\r\n          };\r\n          fillPix(xpos, ypos);\r\n          artsDispatch({ type: \"UPD_ART\", artId: arts.chosen!, data: art });\r\n          break;\r\n        case \"PIPETTE\":\r\n          settingsDispatch!({ type: \"SET_COLOR\", data: color });\r\n          break;\r\n        case \"MOVE\":\r\n          if (!draggedPixels) {\r\n            return setDraggedPixels({ x: 0, y: 0 });\r\n          }\r\n          let x = xpos - draggedPixels!.x;\r\n          let y = ypos - draggedPixels!.y;\r\n          console.log(x, y);\r\n          x = (x - (x % 2)) / x;\r\n          y = (y - (y % 2)) / y;\r\n          const newArt = JSON.parse(\r\n            JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n          ) as Art;\r\n          newArt.rows.forEach((row) => {\r\n            row.forEach((pix) => {\r\n              pix.xpos +=\r\n                x === settings!.columnSize\r\n                  ? 0\r\n                  : x < 0\r\n                  ? settings!.columnSize - 1\r\n                  : x;\r\n              pix.ypos =\r\n                y === settings!.rowSize ? 0 : y < 0 ? settings!.rowSize - 1 : y;\r\n            });\r\n          });\r\n          artsDispatch({\r\n            type: \"UPD_ART\",\r\n            data: newArt,\r\n            artId: arts.chosen!,\r\n          });\r\n          setDraggedPixels((prevState) => {\r\n            return {\r\n              x: x,\r\n              y: y,\r\n            };\r\n          });\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = { ...arts.arts!.find((art) => art.id === arts.chosen)! };\r\n  }\r\n\r\n  const ps = (600 + settings!.columnSize) / settings!.columnSize;\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onDragStart}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}