{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (!arts.chosen) {\n      const board = [];\n\n      for (let i = 0; i < settings.rowSize; i++) {\n        let arr = [];\n\n        for (let j = 0; j < settings.columnSize; j++) {\n          arr.push({\n            xpos: j,\n            ypos: i,\n            color: settings.defColor\n          });\n        }\n\n        board.push(arr);\n      }\n\n      const id = Math.random().toString();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: board,\n          id: id\n        }\n      });\n      artsDispatch({\n        type: \"SET_CHOSEN\",\n        data: id\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const onEndBrush = e => {\n    e.preventDefault();\n    document.removeEventListener(\"dragend\", onEndBrush);\n  };\n\n  const onStartBrush = e => {\n    const clone = e.target.cloneNode(true);\n    clone.style.display = \"none\";\n    e.dataTransfer.setDragImage(clone, 0, 0);\n    document.addEventListener(\"dragend\", onEndBrush);\n  };\n\n  const onDragStart = (x, y) => {\n    return e => {\n      console.log(\"somehting\");\n      const clone = e.target.cloneNode(true);\n      clone.style.display = \"none\";\n      e.dataTransfer.setDragImage(clone, 0, 0);\n      document.addEventListener(\"dragend\", onEndBrush);\n    };\n  };\n\n  const pixelClickedHandler = (xpos, ypos, color) => {\n    return e => {\n      e.preventDefault();\n\n      switch (settings.tool) {\n        case \"BRUSH\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"ERASER\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.defColor,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"FILL\":\n          const art = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n\n          const fillPix = (x, y) => {\n            const checkPix = (xp, yp) => {\n              if (yp > art.rows.length - 1 || yp < 0 || xp > art.rows[yp].length || xp < 0) return false;\n              const pix = art.rows[yp][xp];\n              if (!pix) return false;\n              const colorP = pix.color;\n              return colorP !== settings.color && colorP === color;\n            };\n\n            art.rows[y][x].color = settings.color;\n\n            if (checkPix(x + 1, y)) {\n              fillPix(x + 1, y);\n            }\n\n            if (checkPix(x, y + 1)) {\n              fillPix(x, y + 1);\n            }\n\n            if (checkPix(x, y - 1)) {\n              fillPix(x, y - 1);\n            }\n\n            if (checkPix(x - 1, y)) {\n              fillPix(x - 1, y);\n            }\n          };\n\n          fillPix(xpos, ypos);\n          artsDispatch({\n            type: \"UPD_ART\",\n            artId: arts.chosen,\n            data: art\n          });\n          break;\n\n        case \"PIPETTE\":\n          settingsDispatch({\n            type: \"SET_COLOR\",\n            data: color\n          });\n          break;\n\n        case \"MOVE\":\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = { ...arts.arts.find(art => art.id === arts.chosen)\n    };\n  }\n\n  const ps = (600 + settings.columnSize) / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onDragStart,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"5uL9oNrF+e5C7BiI+8NJVmao+0U=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","Pixel","Board","settings","settingsDispatch","arts","artsDispatch","boardRef","chosen","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","defColor","id","Math","random","toString","type","data","rows","onEndBrush","e","preventDefault","document","removeEventListener","onStartBrush","clone","target","cloneNode","style","display","dataTransfer","setDragImage","addEventListener","onDragStart","x","y","console","log","pixelClickedHandler","tool","artId","art","JSON","parse","stringify","find","fillPix","checkPix","xp","yp","length","pix","colorP","ps","map","pixel"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!arts.chosen) {\r\n      const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n      for (let i = 0; i < settings!.rowSize; i++) {\r\n        let arr = [];\r\n        for (let j = 0; j < settings!.columnSize; j++) {\r\n          arr.push({ xpos: j, ypos: i, color: settings!.defColor });\r\n        }\r\n        board.push(arr);\r\n      }\r\n      const id = Math.random().toString();\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: board,\r\n          id: id,\r\n        },\r\n      });\r\n      artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const onEndBrush: EventListener = (e) => {\r\n    e.preventDefault();\r\n    document.removeEventListener(\"dragend\", onEndBrush);\r\n  };\r\n\r\n  const onStartBrush: DragEventHandler = (e) => {\r\n    const clone = (e.target as HTMLElement).cloneNode(true);\r\n    (clone as HTMLElement).style.display = \"none\";\r\n    e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n    document.addEventListener(\"dragend\", onEndBrush);\r\n  };\r\n\r\n  const onDragStart = (x: number, y: number) => {\r\n    return ((e) => {\r\n      console.log(\"somehting\");\r\n      const clone = (e.target as HTMLElement).cloneNode(true);\r\n      (clone as HTMLElement).style.display = \"none\";\r\n      e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n      document.addEventListener(\"dragend\", onEndBrush);\r\n    }) as DragEventHandler;\r\n  };\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number, color: string) => {\r\n    return ((e) => {\r\n      e.preventDefault();\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"ERASER\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.defColor,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"FILL\":\r\n          const art: Art = JSON.parse(\r\n            JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n          );\r\n          const fillPix = (x: number, y: number) => {\r\n            const checkPix = (xp: number, yp: number): boolean => {\r\n              if (\r\n                yp > art.rows.length - 1 ||\r\n                yp < 0 ||\r\n                xp > art.rows[yp].length ||\r\n                xp < 0\r\n              )\r\n                return false;\r\n              const pix = art.rows[yp][xp];\r\n              if (!pix) return false;\r\n              const colorP = pix.color;\r\n              return colorP !== settings!.color && colorP === color;\r\n            };\r\n            art.rows[y][x].color = settings!.color;\r\n\r\n            if (checkPix(x + 1, y)) {\r\n              fillPix(x + 1, y);\r\n            }\r\n            if (checkPix(x, y + 1)) {\r\n              fillPix(x, y + 1);\r\n            }\r\n            if (checkPix(x, y - 1)) {\r\n              fillPix(x, y - 1);\r\n            }\r\n            if (checkPix(x - 1, y)) {\r\n              fillPix(x - 1, y);\r\n            }\r\n          };\r\n          fillPix(xpos, ypos);\r\n          artsDispatch({ type: \"UPD_ART\", artId: arts.chosen!, data: art });\r\n          break;\r\n        case \"PIPETTE\":\r\n          settingsDispatch!({ type: \"SET_COLOR\", data: color });\r\n          break;\r\n        case \"MOVE\":\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = { ...arts.arts!.find((art) => art.id === arts.chosen)! };\r\n  }\r\n\r\n  const ps = (600 + settings!.columnSize) / settings!.columnSize;\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onDragStart}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}