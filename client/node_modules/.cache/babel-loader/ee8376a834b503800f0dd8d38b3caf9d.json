{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\ToolsBar\\\\SaveImage\\\\SaveImage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport classes from \"./SaveImage.module.css\";\nimport { ArtsContext } from \"../../../context/arts-context\";\nimport { SettingsContext } from \"../../../context/settings-context\";\nimport { createCanvas } from \"canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SaveImage = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts\n  } = useContext(ArtsContext);\n  const [img, setImg] = useState(null);\n\n  const onSaveImage = () => {\n    const canvasWidth = 10 * settings.columnSize;\n    const canvasHeight = 10 * settings.rowSize;\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    const context = canvas.getContext(\"2d\");\n    const art = arts.arts.find(art => art.id === arts.chosen);\n\n    for (let i = 0; i < settings.rowSize; i++) {\n      for (let j = 0; j < settings.columnSize; j++) {\n        context.fillStyle = art.rows[i][j].color === settings.defColor ? \"transparent\" : art.rows[i][j].color;\n        context.fillRect(j * 10, i * 10, 10, 10);\n      }\n    }\n\n    const buffer = canvas.toBuffer(\"image/png\");\n    setImg(buffer);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    action: \"/api\",\n    onSubmit: onSaveImage,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: classes.SaveImage,\n      children: \"SAVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: \"img\",\n      value: JSON.stringify(img)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: \"cs\",\n      value: settings.columnSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: \"rs\",\n      value: settings.rowSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: \"dc\",\n      value: settings.defColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SaveImage, \"nMTJBD6NxNL7geVkU/cRSuxerx8=\");\n\n_c = SaveImage;\nexport default SaveImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveImage\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/ToolsBar/SaveImage/SaveImage.tsx"],"names":["useContext","useState","classes","ArtsContext","SettingsContext","createCanvas","SaveImage","settings","arts","img","setImg","onSaveImage","canvasWidth","columnSize","canvasHeight","rowSize","canvas","context","getContext","art","find","id","chosen","i","j","fillStyle","rows","color","defColor","fillRect","buffer","toBuffer","JSON","stringify"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\r\n\r\nimport classes from \"./SaveImage.module.css\";\r\nimport { Art, ArtsContext } from \"../../../context/arts-context\";\r\nimport { SettingsContext } from \"../../../context/settings-context\";\r\nimport { createCanvas } from \"canvas\";\r\n\r\nconst SaveImage = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts } = useContext(ArtsContext)!;\r\n  const [img, setImg] = useState<null | Buffer>(null);\r\n\r\n  const onSaveImage = () => {\r\n    const canvasWidth = 10 * settings!.columnSize;\r\n    const canvasHeight = 10 * settings!.rowSize;\r\n\r\n    const canvas = createCanvas(canvasWidth, canvasHeight);\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    const art = arts.arts.find((art) => art.id === arts.chosen)!;\r\n    for (let i = 0; i < settings!.rowSize; i++) {\r\n      for (let j = 0; j < settings!.columnSize; j++) {\r\n        context.fillStyle =\r\n          art.rows[i][j].color === settings!.defColor\r\n            ? \"transparent\"\r\n            : art.rows[i][j].color;\r\n        context.fillRect(j * 10, i * 10, 10, 10);\r\n      }\r\n    }\r\n    const buffer = canvas.toBuffer(\"image/png\");\r\n    setImg(buffer);\r\n  };\r\n\r\n  return (\r\n    <form action=\"/api\" onSubmit={onSaveImage}>\r\n      <button type=\"submit\" className={classes.SaveImage}>\r\n        SAVE\r\n      </button>\r\n      <input type=\"hidden\" name=\"img\" value={JSON.stringify(img)} />\r\n      <input type=\"hidden\" name=\"cs\" value={settings!.columnSize} />\r\n      <input type=\"hidden\" name=\"rs\" value={settings!.rowSize} />\r\n      <input type=\"hidden\" name=\"dc\" value={settings!.defColor} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SaveImage;\r\n"]},"metadata":{},"sourceType":"module"}