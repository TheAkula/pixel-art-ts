{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { useContext, useRef } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const boardRef = useRef(null);\n\n  const pixelClickedHandler = e => {\n    switch (settings.tool) {\n      case \"BRUSH\":\n    }\n  };\n\n  const board = [];\n\n  for (let i = 0; i < settings.rowSize; i++) {\n    let arr = [];\n\n    for (let j = 0; j < settings.columnSize; j++) {\n      arr.push({\n        xpos: j,\n        ypos: i\n      });\n    }\n\n    board.push(arr);\n  }\n\n  let ps = 0;\n\n  if (boardRef.current) {\n    ps = boardRef.current.offsetWidth / settings.columnSize;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: board.map(arr => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.BoardLine,\n        children: arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n          size: ps,\n          clicked: pixelClickedHandler,\n          ...pixel\n        }, pixel.ypos.toString() + pixel.xpos, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, board.indexOf(arr), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"7+uqfMyxBZkXzAnD+1KJMTkVApY=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","useContext","useRef","Pixel","Board","settings","settingsDispatch","boardRef","pixelClickedHandler","e","tool","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","ps","current","offsetWidth","map","BoardLine","pixel","toString","indexOf"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAA4BC,UAA5B,EAAwCC,MAAxC,QAAsD,OAAtD;AAEA,OAAOC,KAAP,MAAkB,eAAlB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAiCL,UAAU,CAACD,eAAD,CAAjD;AACA,QAAMO,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMM,mBAAsD,GAAIC,CAAD,IAAO;AACpE,YAAQJ,QAAQ,CAAEK,IAAlB;AACE,WAAK,OAAL;AADF;AAGD,GAJD;;AAMA,QAAMC,KAAyC,GAAG,EAAlD;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAAEQ,OAA9B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIE,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,CAAEW,UAA9B,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CD,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEC,QAAAA,IAAI,EAAEH,CAAR;AAAWI,QAAAA,IAAI,EAAEP;AAAjB,OAAT;AACD;;AACDD,IAAAA,KAAK,CAACM,IAAN,CAAWH,GAAX;AACD;;AAED,MAAIM,EAAE,GAAG,CAAT;;AAEA,MAAIb,QAAQ,CAACc,OAAb,EAAsB;AACpBD,IAAAA,EAAE,GACCb,QAAQ,CAACc,OAAV,CAAsCC,WAAtC,GAAoDjB,QAAQ,CAAEW,UADhE;AAED;;AAED,sBACE;AAAK,IAAA,GAAG,EAAET,QAAV;AAAoB,IAAA,SAAS,EAAER,OAAO,CAACK,KAAvC;AAAA,cACGO,KAAK,CAACY,GAAN,CAAWT,GAAD,IAAS;AAClB,0BACE;AAAK,QAAA,SAAS,EAAEf,OAAO,CAACyB,SAAxB;AAAA,kBACGV,GAAG,CAACS,GAAJ,CAASE,KAAD,iBACP,QAAC,KAAD;AACE,UAAA,IAAI,EAAEL,EADR;AAEE,UAAA,OAAO,EAAEZ,mBAFX;AAAA,aAIMiB;AAJN,WAGOA,KAAK,CAACN,IAAN,CAAWO,QAAX,KAAwBD,KAAK,CAACP,IAHrC;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAAwCP,KAAK,CAACgB,OAAN,CAAcb,GAAd,CAAxC;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KAbA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA7CD;;GAAMV,K;;KAAAA,K;AA+CN,eAAeA,KAAf","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { MouseEventHandler, useContext, useRef } from \"react\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const boardRef = useRef(null);\r\n\r\n  const pixelClickedHandler: MouseEventHandler<HTMLDivElement> = (e) => {\r\n    switch (settings!.tool) {\r\n      case \"BRUSH\":\r\n    }\r\n  };\r\n\r\n  const board: { xpos: number; ypos: number }[][] = [];\r\n\r\n  for (let i = 0; i < settings!.rowSize; i++) {\r\n    let arr = [];\r\n    for (let j = 0; j < settings!.columnSize; j++) {\r\n      arr.push({ xpos: j, ypos: i });\r\n    }\r\n    board.push(arr);\r\n  }\r\n\r\n  let ps = 0;\r\n\r\n  if (boardRef.current) {\r\n    ps =\r\n      (boardRef.current! as HTMLDivElement).offsetWidth / settings!.columnSize;\r\n  }\r\n\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {board.map((arr) => {\r\n        return (\r\n          <div className={classes.BoardLine} key={board.indexOf(arr)}>\r\n            {arr.map((pixel) => (\r\n              <Pixel\r\n                size={ps}\r\n                clicked={pixelClickedHandler}\r\n                key={pixel.ypos.toString() + pixel.xpos}\r\n                {...pixel}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}