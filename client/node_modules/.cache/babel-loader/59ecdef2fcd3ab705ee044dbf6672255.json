{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (!arts.chosen) {\n      const board = [];\n\n      for (let i = 0; i < settings.rowSize; i++) {\n        let arr = [];\n\n        for (let j = 0; j < settings.columnSize; j++) {\n          arr.push({\n            xpos: j,\n            ypos: i,\n            color: settings.defColor\n          });\n        }\n\n        board.push(arr);\n      }\n\n      const id = Math.random().toString();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: board,\n          id: id\n        }\n      });\n      artsDispatch({\n        type: \"SET_CHOSEN\",\n        data: id\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const onEndBrush = e => {\n    e.preventDefault();\n    document.removeEventListener(\"dragend\", onEndBrush);\n  };\n\n  const onStartBrush = e => {\n    const clone = e.target.cloneNode(true);\n    clone.style.display = \"none\";\n    e.dataTransfer.setDragImage(clone, 0, 0);\n    document.addEventListener(\"dragend\", onEndBrush);\n  };\n\n  const pixelClickedHandler = (xpos, ypos, color) => {\n    return e => {\n      e.preventDefault();\n\n      switch (settings.tool) {\n        case \"BRUSH\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"ERASER\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.defColor,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"FILL\":\n          const pixles = [{\n            x: 0,\n            y: 0\n          }];\n          console.log(pixles.includes({\n            x: 0,\n            y: 0\n          }));\n\n          const fillPix = (x, y) => {\n            const checkPix = (xp, yp) => {\n              const art = arts.arts.find(art => art.id === arts.chosen);\n              if (yp > art.rows.length - 1 || xp > art.rows[yp].length) return false;\n              const pix = art.rows[yp][xp];\n              if (!pix) return false;\n              const colorP = pix.color;\n              console.log(yp, xp, colorP, settings.color, settings.color !== colorP, colorP === color);\n              return colorP !== settings.color && colorP === color;\n            };\n\n            artsDispatch({\n              type: \"SET_PIX\",\n              artId: arts.chosen,\n              data: settings.color,\n              x: x,\n              y: y\n            });\n\n            if (checkPix(x + 1, y)) {\n              console.log(\"go to right\", y);\n              fillPix(x + 1, y);\n            }\n\n            if (checkPix(x, y + 1)) {\n              console.log(\"go to bottom\", y);\n              fillPix(x, y + 1);\n            }\n\n            if (checkPix(x, y - 1)) {\n              console.log(\"go to top\", y);\n              fillPix(x, y - 1);\n            }\n\n            if (checkPix(x - 1, y)) {\n              console.log(\"go to left\", y);\n              fillPix(x - 1, y);\n            }\n          }; // fillPix(xpos, ypos);\n          // artsDispatch({type: 'SET_PIX', artId: arts.chosen!, data: settings!.color, x: })\n\n\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = { ...arts.arts.find(art => art.id === arts.chosen)\n    };\n  }\n\n  const ps = (600 - settings.columnSize + 1) / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onStartBrush,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"TyzQXQeqdW77rY9qrZp8aW/BSu4=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","Pixel","Board","settings","arts","artsDispatch","boardRef","chosen","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","defColor","id","Math","random","toString","type","data","rows","onEndBrush","e","preventDefault","document","removeEventListener","onStartBrush","clone","target","cloneNode","style","display","dataTransfer","setDragImage","addEventListener","pixelClickedHandler","tool","artId","x","y","pixles","console","log","includes","fillPix","checkPix","xp","yp","art","find","length","pix","colorP","ps","map","pixel"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!arts.chosen) {\r\n      const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n      for (let i = 0; i < settings!.rowSize; i++) {\r\n        let arr = [];\r\n        for (let j = 0; j < settings!.columnSize; j++) {\r\n          arr.push({ xpos: j, ypos: i, color: settings!.defColor });\r\n        }\r\n        board.push(arr);\r\n      }\r\n      const id = Math.random().toString();\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: board,\r\n          id: id,\r\n        },\r\n      });\r\n      artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const onEndBrush: EventListener = (e) => {\r\n    e.preventDefault();\r\n    document.removeEventListener(\"dragend\", onEndBrush);\r\n  };\r\n\r\n  const onStartBrush: DragEventHandler = (e) => {\r\n    const clone = (e.target as HTMLElement).cloneNode(true);\r\n    (clone as HTMLElement).style.display = \"none\";\r\n    e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n    document.addEventListener(\"dragend\", onEndBrush);\r\n  };\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number, color: string) => {\r\n    return ((e) => {\r\n      e.preventDefault();\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"ERASER\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.defColor,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"FILL\":\r\n          const pixles = [{ x: 0, y: 0 }];\r\n          console.log(pixles.includes({ x: 0, y: 0 }));\r\n          const fillPix = (x: number, y: number) => {\r\n            const checkPix = (xp: number, yp: number): boolean => {\r\n              const art = arts.arts.find((art) => art.id === arts.chosen)!;\r\n              if (yp > art.rows.length - 1 || xp > art.rows[yp].length)\r\n                return false;\r\n              const pix = art.rows[yp][xp];\r\n              if (!pix) return false;\r\n              const colorP = pix.color;\r\n              console.log(\r\n                yp,\r\n                xp,\r\n                colorP,\r\n                settings!.color,\r\n                settings!.color !== colorP,\r\n                colorP === color\r\n              );\r\n              return colorP !== settings!.color && colorP === color;\r\n            };\r\n            artsDispatch({\r\n              type: \"SET_PIX\",\r\n              artId: arts.chosen!,\r\n              data: settings!.color,\r\n              x: x,\r\n              y: y,\r\n            });\r\n\r\n            if (checkPix(x + 1, y)) {\r\n              console.log(\"go to right\", y);\r\n              fillPix(x + 1, y);\r\n            }\r\n            if (checkPix(x, y + 1)) {\r\n              console.log(\"go to bottom\", y);\r\n              fillPix(x, y + 1);\r\n            }\r\n            if (checkPix(x, y - 1)) {\r\n              console.log(\"go to top\", y);\r\n              fillPix(x, y - 1);\r\n            }\r\n            if (checkPix(x - 1, y)) {\r\n              console.log(\"go to left\", y);\r\n              fillPix(x - 1, y);\r\n            }\r\n          };\r\n          // fillPix(xpos, ypos);\r\n          // artsDispatch({type: 'SET_PIX', artId: arts.chosen!, data: settings!.color, x: })\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = { ...arts.arts!.find((art) => art.id === arts.chosen)! };\r\n  }\r\n\r\n  const ps = (600 - settings!.columnSize + 1) / settings!.columnSize;\r\n\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onStartBrush}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}