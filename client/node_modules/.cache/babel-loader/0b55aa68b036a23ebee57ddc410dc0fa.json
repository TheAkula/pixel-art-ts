{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\ToolsBar\\\\SaveImage\\\\SaveImage.tsx\",\n    _s = $RefreshSig$();\n\nimport fs from \"fs\";\nimport { useContext } from \"react\";\nimport classes from \"./SaveImage.module.css\";\nimport { ArtsContext } from \"../../../context/arts-context\";\nimport { SettingsContext } from \"../../../context/settings-context\";\nimport { createCanvas } from \"canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SaveImage = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts\n  } = useContext(ArtsContext);\n\n  const onSaveImage = () => {\n    const canvasWidth = 10 * settings.columnSize;\n    const canvasHeight = 10 * settings.rowSize;\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    const context = canvas.getContext(\"2d\");\n    const art = arts.arts.find(art => art.id === arts.chosen);\n\n    for (let i = 0; i < settings.rowSize; i++) {\n      for (let j = 0; j < settings.columnSize; j++) {\n        context.fillStyle = art.rows[i][j].color === settings.defColor ? \"transparent\" : art.rows[i][j].color;\n        context.fillRect(j * 10, i * 10, 10, 10);\n      }\n    }\n\n    const buffer = canvas.toBuffer(\"image/png\");\n    fs.writeFileSync(\"../../../assets/images/test.png\", buffer);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: classes.SaveImage,\n    onClick: onSaveImage,\n    children: \"SAVE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SaveImage, \"6EOwCWlo1fptcareZOhjHFSEd38=\");\n\n_c = SaveImage;\nexport default SaveImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveImage\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/ToolsBar/SaveImage/SaveImage.tsx"],"names":["fs","useContext","classes","ArtsContext","SettingsContext","createCanvas","SaveImage","settings","arts","onSaveImage","canvasWidth","columnSize","canvasHeight","rowSize","canvas","context","getContext","art","find","id","chosen","i","j","fillStyle","rows","color","defColor","fillRect","buffer","toBuffer","writeFileSync"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,YAAT,QAA6B,QAA7B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAeN,UAAU,CAACG,eAAD,CAA/B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWP,UAAU,CAACE,WAAD,CAA3B;;AAEA,QAAMM,WAAW,GAAG,MAAM;AACxB,UAAMC,WAAW,GAAG,KAAKH,QAAQ,CAAEI,UAAnC;AACA,UAAMC,YAAY,GAAG,KAAKL,QAAQ,CAAEM,OAApC;AAEA,UAAMC,MAAM,GAAGT,YAAY,CAACK,WAAD,EAAcE,YAAd,CAA3B;AACA,UAAMG,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAhB;AAEA,UAAMC,GAAG,GAAGT,IAAI,CAACA,IAAL,CAAUU,IAAV,CAAgBD,GAAD,IAASA,GAAG,CAACE,EAAJ,KAAWX,IAAI,CAACY,MAAxC,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,QAAQ,CAAEM,OAA9B,EAAuCQ,CAAC,EAAxC,EAA4C;AAC1C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,QAAQ,CAAEI,UAA9B,EAA0CW,CAAC,EAA3C,EAA+C;AAC7CP,QAAAA,OAAO,CAACQ,SAAR,GACEN,GAAG,CAACO,IAAJ,CAASH,CAAT,EAAYC,CAAZ,EAAeG,KAAf,KAAyBlB,QAAQ,CAAEmB,QAAnC,GACI,aADJ,GAEIT,GAAG,CAACO,IAAJ,CAASH,CAAT,EAAYC,CAAZ,EAAeG,KAHrB;AAIAV,QAAAA,OAAO,CAACY,QAAR,CAAiBL,CAAC,GAAG,EAArB,EAAyBD,CAAC,GAAG,EAA7B,EAAiC,EAAjC,EAAqC,EAArC;AACD;AACF;;AACD,UAAMO,MAAM,GAAGd,MAAM,CAACe,QAAP,CAAgB,WAAhB,CAAf;AACA7B,IAAAA,EAAE,CAAC8B,aAAH,CAAiB,iCAAjB,EAAoDF,MAApD;AACD,GAnBD;;AAqBA,sBACE;AAAQ,IAAA,SAAS,EAAE1B,OAAO,CAACI,SAA3B;AAAsC,IAAA,OAAO,EAAEG,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9BD;;GAAMH,S;;KAAAA,S;AAgCN,eAAeA,SAAf","sourcesContent":["import fs from \"fs\";\r\nimport { useContext } from \"react\";\r\n\r\nimport classes from \"./SaveImage.module.css\";\r\nimport { ArtsContext } from \"../../../context/arts-context\";\r\nimport { SettingsContext } from \"../../../context/settings-context\";\r\nimport { createCanvas } from \"canvas\";\r\n\r\nconst SaveImage = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts } = useContext(ArtsContext)!;\r\n\r\n  const onSaveImage = () => {\r\n    const canvasWidth = 10 * settings!.columnSize;\r\n    const canvasHeight = 10 * settings!.rowSize;\r\n\r\n    const canvas = createCanvas(canvasWidth, canvasHeight);\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    const art = arts.arts.find((art) => art.id === arts.chosen)!;\r\n    for (let i = 0; i < settings!.rowSize; i++) {\r\n      for (let j = 0; j < settings!.columnSize; j++) {\r\n        context.fillStyle =\r\n          art.rows[i][j].color === settings!.defColor\r\n            ? \"transparent\"\r\n            : art.rows[i][j].color;\r\n        context.fillRect(j * 10, i * 10, 10, 10);\r\n      }\r\n    }\r\n    const buffer = canvas.toBuffer(\"image/png\");\r\n    fs.writeFileSync(\"../../../assets/images/test.png\", buffer);\r\n  };\r\n\r\n  return (\r\n    <button className={classes.SaveImage} onClick={onSaveImage}>\r\n      SAVE\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SaveImage;\r\n"]},"metadata":{},"sourceType":"module"}