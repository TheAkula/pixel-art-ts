{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    const board = [];\n\n    for (let i = 0; i < settings.rowSize; i++) {\n      let arr = [];\n\n      for (let j = 0; j < settings.columnSize; j++) {\n        arr.push({\n          xpos: j,\n          ypos: i,\n          color: settings.color\n        });\n      }\n\n      board.push(arr);\n    }\n\n    const id = Math.random().toString();\n    artsDispatch({\n      type: \"ADD_ART\",\n      data: {\n        rows: board,\n        id: id\n      }\n    });\n    artsDispatch({\n      type: \"SET_CHOSEN\",\n      data: id\n    });\n  }, [artsDispatch, settings]);\n\n  const pixelClickedHandler = (xpos, ypos) => {\n    return e => {\n      switch (settings.tool) {\n        case \"BRUSH\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            data: settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = arts.arts.find(art => art.id === arts.chosen);\n  }\n\n  const ps = 600 / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.BoardLine,\n        children: arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n          size: ps,\n          clicked: pixelClickedHandler,\n          ...pixel\n        }, pixel.ypos.toString() + pixel.xpos, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this))\n      }, art.rows.indexOf(arr), false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"5uL9oNrF+e5C7BiI+8NJVmao+0U=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","Pixel","Board","settings","settingsDispatch","arts","artsDispatch","boardRef","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","id","Math","random","toString","type","data","rows","pixelClickedHandler","e","tool","x","y","art","length","find","chosen","ps","map","BoardLine","pixel","indexOf"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport { MouseEventHandler, useContext, useEffect, useRef } from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n\r\n    for (let i = 0; i < settings!.rowSize; i++) {\r\n      let arr = [];\r\n      for (let j = 0; j < settings!.columnSize; j++) {\r\n        arr.push({ xpos: j, ypos: i, color: settings!.color });\r\n      }\r\n      board.push(arr);\r\n    }\r\n    const id = Math.random().toString();\r\n    artsDispatch({\r\n      type: \"ADD_ART\",\r\n      data: {\r\n        rows: board,\r\n        id: id,\r\n      },\r\n    });\r\n    artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n  }, [artsDispatch, settings]);\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number) => {\r\n    return ((e) => {\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            data: settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = arts.arts!.find((art) => art.id === arts.chosen)!;\r\n  }\r\n\r\n  const ps = 600 / settings!.columnSize;\r\n\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return (\r\n            <div className={classes.BoardLine} key={art!.rows.indexOf(arr)}>\r\n              {arr.map((pixel) => (\r\n                <Pixel\r\n                  size={ps}\r\n                  clicked={pixelClickedHandler}\r\n                  key={pixel.ypos.toString() + pixel.xpos}\r\n                  {...pixel}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}