{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\client\\\\src\\\\components\\\\SettingsBar\\\\SettingsBar.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport SizeToggle from \"./SizeToggle/SizeToggle\";\nimport Reset from \"./Reset/Reset\";\nimport PreviewAnimation from \"./PreviewAnimation/PreviewAnimation\";\nimport createArt from \"../../hoc/createArt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SettingsBar = () => {\n  _s();\n\n  const [duration, setDuration] = useState(1);\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    artsState,\n    artsDispatch\n  } = useContext(ArtsContext);\n\n  const onAddRow = e => {\n    settingsDispatch({\n      type: \"ADD_ROW\"\n    });\n    const row = [];\n\n    for (let i = 0; i < settings.columnSize; i++) {\n      row.push({\n        xpos: i,\n        ypos: settings.rowSize,\n        color: settings.defColor\n      });\n    }\n\n    artsDispatch({\n      type: \"ADD_ROW\",\n      data: row\n    });\n  };\n\n  const onDelRow = e => {\n    settingsDispatch({\n      type: \"DEL_ROW\"\n    });\n    artsDispatch({\n      type: \"DEL_ROW\"\n    });\n  };\n\n  const onAddCol = e => {\n    settingsDispatch({\n      type: \"ADD_COL\"\n    });\n    artsDispatch({\n      type: \"ADD_COL\",\n      data: {\n        x: settings.columnSize,\n        color: settings.defColor\n      }\n    });\n  };\n\n  const onDelCol = e => {\n    settingsDispatch({\n      type: \"DEL_COL\"\n    });\n    artsDispatch({\n      type: \"DEL_COL\"\n    });\n  };\n\n  const resetHandler = e => {\n    const artRows = createArt(settings);\n    artsDispatch({\n      type: \"UPD_ART\",\n      artId: artsState.chosen,\n      data: {\n        rows: artRows,\n        id: artsState.chosen\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PreviewAnimation, {\n      duration: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SizeToggle, {\n      cur: settings.rowSize,\n      img: \"\\u2195\",\n      add: onAddRow,\n      del: onDelRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SizeToggle, {\n      cur: settings.columnSize,\n      img: \"\\u2194\",\n      add: onAddCol,\n      del: onDelCol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Reset, {\n      clicked: resetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsBar, \"lcgrq3u/sgQhEJtcODdy2Z88vl8=\");\n\n_c = SettingsBar;\nexport default SettingsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsBar\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/client/src/components/SettingsBar/SettingsBar.tsx"],"names":["useContext","useState","SettingsContext","ArtsContext","SizeToggle","Reset","PreviewAnimation","createArt","SettingsBar","duration","setDuration","settings","settingsDispatch","artsState","artsDispatch","onAddRow","e","type","row","i","columnSize","push","xpos","ypos","rowSize","color","defColor","data","onDelRow","onAddCol","x","onDelCol","resetHandler","artRows","artId","chosen","rows","id"],"mappings":"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","sourcesContent":["import { MouseEventHandler, useContext, useState } from \"react\";\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\n\r\nimport SizeToggle from \"./SizeToggle/SizeToggle\";\r\nimport Reset from \"./Reset/Reset\";\r\nimport PreviewAnimation from \"./PreviewAnimation/PreviewAnimation\";\r\nimport createArt from \"../../hoc/createArt\";\r\n\r\nconst SettingsBar = () => {\r\n  const [duration, setDuration] = useState(1);\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { artsState, artsDispatch } = useContext(ArtsContext)!;\r\n\r\n  const onAddRow: MouseEventHandler = (e) => {\r\n    settingsDispatch!({ type: \"ADD_ROW\" });\r\n    const row = [];\r\n    for (let i = 0; i < settings!.columnSize; i++) {\r\n      row.push({\r\n        xpos: i,\r\n        ypos: settings!.rowSize,\r\n        color: settings!.defColor,\r\n      });\r\n    }\r\n    artsDispatch({ type: \"ADD_ROW\", data: row });\r\n  };\r\n\r\n  const onDelRow: MouseEventHandler = (e) => {\r\n    settingsDispatch!({ type: \"DEL_ROW\" });\r\n    artsDispatch({ type: \"DEL_ROW\" });\r\n  };\r\n\r\n  const onAddCol: MouseEventHandler = (e) => {\r\n    settingsDispatch!({ type: \"ADD_COL\" });\r\n    artsDispatch({\r\n      type: \"ADD_COL\",\r\n      data: { x: settings!.columnSize, color: settings!.defColor },\r\n    });\r\n  };\r\n\r\n  const onDelCol: MouseEventHandler = (e) => {\r\n    settingsDispatch!({ type: \"DEL_COL\" });\r\n    artsDispatch({ type: \"DEL_COL\" });\r\n  };\r\n\r\n  const resetHandler: MouseEventHandler = (e) => {\r\n    const artRows = createArt(settings!);\r\n    artsDispatch({\r\n      type: \"UPD_ART\",\r\n      artId: artsState.chosen!,\r\n      data: { rows: artRows, id: artsState!.chosen },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PreviewAnimation duration={0} />\r\n      <SizeToggle\r\n        cur={settings!.rowSize}\r\n        img=\"&#8597;\"\r\n        add={onAddRow}\r\n        del={onDelRow}\r\n      />\r\n      <SizeToggle\r\n        cur={settings!.columnSize}\r\n        img=\"&#8596;\"\r\n        add={onAddCol}\r\n        del={onDelCol}\r\n      />\r\n      <Reset clicked={resetHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsBar;\r\n"]},"metadata":{},"sourceType":"module"}