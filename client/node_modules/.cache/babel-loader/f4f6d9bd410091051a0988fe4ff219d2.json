{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const [draggedPixels, setDraggedPixels] = useState(null);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (!arts.chosen) {\n      const board = [];\n\n      for (let i = 0; i < settings.rowSize; i++) {\n        let arr = [];\n\n        for (let j = 0; j < settings.columnSize; j++) {\n          arr.push({\n            xpos: j,\n            ypos: i,\n            color: settings.defColor\n          });\n        }\n\n        board.push(arr);\n      }\n\n      const id = Math.random().toString();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: board,\n          id: id\n        }\n      });\n      artsDispatch({\n        type: \"SET_CHOSEN\",\n        data: id\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const onDragEnd = e => {\n    e.preventDefault();\n    setDraggedPixels(null);\n    document.removeEventListener(\"dragend\", onDragEnd);\n  };\n\n  const onDragStart = e => {\n    const clone = e.target.cloneNode(true);\n    clone.style.display = \"none\";\n    e.dataTransfer.setDragImage(clone, 0, 0);\n    document.addEventListener(\"dragend\", onDragEnd);\n  };\n\n  const pixelClickedHandler = e => {\n    e.preventDefault();\n    const coords = e.target.id.split(\"-\");\n\n    switch (settings.tool) {\n      case \"BRUSH\":\n        e.target.style.backgroundColor = settings.color; // artsDispatch({\n        //   type: \"SET_PIX\",\n        //   artId: arts.chosen!,\n        //   data: settings!.color,\n        //   x: xpos,\n        //   y: ypos,\n        // });\n\n        break;\n\n      case \"ERASER\":\n        e.target.style.backgroundColor = settings.defColor; // artsDispatch({\n        //   type: \"SET_PIX\",\n        //   artId: arts.chosen!,\n        //   data: settings!.defColor,\n        //   x: xpos,\n        //   y: ypos,\n        // });\n\n        break;\n\n      case \"FILL\":\n        // const art: Art = JSON.parse(\n        //   JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\n        // );\n        const fillPix = (x, y) => {\n          const checkPix = (xp, yp) => {\n            if (yp > settings.rowSize - 1 || yp < 0 || xp > settings.columnSize || xp < 0) return false;\n            const pix = document.getElementById(yp + \"-\" + xp);\n            if (!pix) return false;\n            const colorP = pix.style.backgroundColor;\n            return colorP !== settings.color && colorP === e.target.style.backgroundColor;\n          }; // art.rows[y][x].color = settings!.color;\n\n\n          e.target.style.backgroundColor = settings.color;\n\n          if (checkPix(x + 1, y)) {\n            fillPix(x + 1, y);\n          }\n\n          if (checkPix(x, y + 1)) {\n            fillPix(x, y + 1);\n          }\n\n          if (checkPix(x, y - 1)) {\n            fillPix(x, y - 1);\n          }\n\n          if (checkPix(x - 1, y)) {\n            fillPix(x - 1, y);\n          }\n        };\n\n        fillPix(+coords[1], +coords[0]);\n        artsDispatch({\n          type: \"UPD_ART\",\n          artId: arts.chosen,\n          data: art\n        });\n        break;\n\n      case \"PIPETTE\":\n        settingsDispatch({\n          type: \"SET_COLOR\",\n          data: e.target.style.backgroundColor\n        });\n        break;\n\n      case \"MOVE\":\n        let dragPix = draggedPixels;\n\n        if (!dragPix) {\n          setDraggedPixels({\n            x: +coords[1],\n            y: +coords[0]\n          });\n          dragPix = {\n            x: +coords[1],\n            y: +coords[0]\n          };\n        }\n\n        let x = +coords[1] - dragPix.x;\n        let y = +coords[0] - dragPix.y;\n\n        if (x > 0) {\n          x = Math.floor(x / 2);\n        } else {\n          x = Math.ceil(x / 2);\n        }\n\n        if (y > 0) {\n          y = Math.floor(y / 2);\n        } else {\n          y = Math.ceil(y / 2);\n        }\n\n        if (Math.abs(x) === 1) {\n          setDraggedPixels({\n            x: +coords[1],\n            y: draggedPixels.y\n          });\n        }\n\n        if (Math.abs(y) === 1) {\n          setDraggedPixels({\n            x: draggedPixels.x,\n            y: +coords[0]\n          });\n        }\n\n        const newArt = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n        newArt.rows.forEach((row, ind) => {\n          row.forEach(pix => {\n            const newX = pix.xpos + x;\n            const newY = pix.ypos + y;\n            pix.xpos = newX > row.length - 1 ? newX - row.length : newX < 0 ? row.length + newX : newX;\n            pix.ypos = newY > newArt.rows.length - 1 ? newY - newArt.rows.length : newY < 0 ? newArt.rows.length + newY : newY;\n          });\n\n          if (x > 0) {\n            newArt.rows[ind] = row.slice(row.length - x).concat(row.slice(0, row.length - x));\n          } else {\n            newArt.rows[ind] = row.slice(Math.abs(x)).concat(row.slice(0, Math.abs(x)));\n          }\n        });\n\n        if (y > 0) {\n          newArt.rows = newArt.rows.slice(newArt.rows.length - y).concat(newArt.rows.slice(0, newArt.rows.length - y));\n        } else {\n          newArt.rows = newArt.rows.slice(Math.abs(y)).concat(newArt.rows.slice(0, Math.abs(y)));\n        }\n\n        artsDispatch({\n          type: \"UPD_ART\",\n          data: newArt,\n          artId: arts.chosen\n        });\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = arts.arts.find(art => art.id === arts.chosen);\n  }\n\n  const ps = (600 + settings.columnSize) / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onDragStart,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"HJ8xxTtYEPS+7jH5DN2Y7THniR8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","useState","Pixel","Board","settings","settingsDispatch","arts","artsDispatch","draggedPixels","setDraggedPixels","boardRef","chosen","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","defColor","id","Math","random","toString","type","data","rows","onDragEnd","e","preventDefault","document","removeEventListener","onDragStart","clone","target","cloneNode","style","display","dataTransfer","setDragImage","addEventListener","pixelClickedHandler","coords","split","tool","backgroundColor","fillPix","x","y","checkPix","xp","yp","pix","getElementById","colorP","artId","art","dragPix","floor","ceil","abs","newArt","JSON","parse","stringify","find","forEach","row","ind","newX","newY","length","slice","concat","ps","map","pixel"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const [draggedPixels, setDraggedPixels] = useState<null | {\r\n    x: number;\r\n    y: number;\r\n  }>(null);\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!arts.chosen) {\r\n      const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n      for (let i = 0; i < settings!.rowSize; i++) {\r\n        let arr = [];\r\n        for (let j = 0; j < settings!.columnSize; j++) {\r\n          arr.push({ xpos: j, ypos: i, color: settings!.defColor });\r\n        }\r\n        board.push(arr);\r\n      }\r\n      const id = Math.random().toString();\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: board,\r\n          id: id,\r\n        },\r\n      });\r\n      artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const onDragEnd: EventListener = (e) => {\r\n    e.preventDefault();\r\n    setDraggedPixels(null);\r\n    document.removeEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const onDragStart: DragEventHandler = (e) => {\r\n    const clone = (e.target as HTMLElement).cloneNode(true);\r\n    (clone as HTMLElement).style.display = \"none\";\r\n    e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n    document.addEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const pixelClickedHandler: MouseEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const coords = (e.target as HTMLElement).id.split(\"-\");\r\n    switch (settings!.tool) {\r\n      case \"BRUSH\":\r\n        (e.target as HTMLElement).style.backgroundColor = settings!.color;\r\n        // artsDispatch({\r\n        //   type: \"SET_PIX\",\r\n        //   artId: arts.chosen!,\r\n        //   data: settings!.color,\r\n        //   x: xpos,\r\n        //   y: ypos,\r\n        // });\r\n        break;\r\n      case \"ERASER\":\r\n        (e.target as HTMLElement).style.backgroundColor = settings!.defColor;\r\n        // artsDispatch({\r\n        //   type: \"SET_PIX\",\r\n        //   artId: arts.chosen!,\r\n        //   data: settings!.defColor,\r\n        //   x: xpos,\r\n        //   y: ypos,\r\n        // });\r\n        break;\r\n      case \"FILL\":\r\n        // const art: Art = JSON.parse(\r\n        //   JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n        // );\r\n        const fillPix = (x: number, y: number) => {\r\n          const checkPix = (xp: number, yp: number): boolean => {\r\n            if (\r\n              yp > settings!.rowSize - 1 ||\r\n              yp < 0 ||\r\n              xp > settings!.columnSize ||\r\n              xp < 0\r\n            )\r\n              return false;\r\n            const pix = document.getElementById(yp + \"-\" + xp);\r\n            if (!pix) return false;\r\n            const colorP = pix.style.backgroundColor;\r\n            return (\r\n              colorP !== settings!.color &&\r\n              colorP === (e.target as HTMLElement).style.backgroundColor\r\n            );\r\n          };\r\n          // art.rows[y][x].color = settings!.color;\r\n          (e.target as HTMLElement).style.backgroundColor = settings!.color;\r\n\r\n          if (checkPix(x + 1, y)) {\r\n            fillPix(x + 1, y);\r\n          }\r\n          if (checkPix(x, y + 1)) {\r\n            fillPix(x, y + 1);\r\n          }\r\n          if (checkPix(x, y - 1)) {\r\n            fillPix(x, y - 1);\r\n          }\r\n          if (checkPix(x - 1, y)) {\r\n            fillPix(x - 1, y);\r\n          }\r\n        };\r\n        fillPix(+coords[1], +coords[0]);\r\n        artsDispatch({ type: \"UPD_ART\", artId: arts.chosen!, data: art });\r\n        break;\r\n      case \"PIPETTE\":\r\n        settingsDispatch!({\r\n          type: \"SET_COLOR\",\r\n          data: (e.target as HTMLElement).style.backgroundColor,\r\n        });\r\n        break;\r\n      case \"MOVE\":\r\n        let dragPix = draggedPixels;\r\n        if (!dragPix) {\r\n          setDraggedPixels({ x: +coords[1], y: +coords[0] });\r\n          dragPix = { x: +coords[1], y: +coords[0] };\r\n        }\r\n        let x = +coords[1] - dragPix!.x;\r\n        let y = +coords[0] - dragPix!.y;\r\n        if (x > 0) {\r\n          x = Math.floor(x / 2);\r\n        } else {\r\n          x = Math.ceil(x / 2);\r\n        }\r\n        if (y > 0) {\r\n          y = Math.floor(y / 2);\r\n        } else {\r\n          y = Math.ceil(y / 2);\r\n        }\r\n\r\n        if (Math.abs(x) === 1) {\r\n          setDraggedPixels({ x: +coords[1], y: draggedPixels!.y });\r\n        }\r\n        if (Math.abs(y) === 1) {\r\n          setDraggedPixels({ x: draggedPixels!.x, y: +coords[0] });\r\n        }\r\n        const newArt = JSON.parse(\r\n          JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n        ) as Art;\r\n        newArt.rows.forEach((row, ind) => {\r\n          row.forEach((pix) => {\r\n            const newX = pix.xpos + x;\r\n            const newY = pix.ypos + y;\r\n            pix.xpos =\r\n              newX > row.length - 1\r\n                ? newX - row.length\r\n                : newX < 0\r\n                ? row.length + newX\r\n                : newX;\r\n            pix.ypos =\r\n              newY > newArt.rows.length - 1\r\n                ? newY - newArt.rows.length\r\n                : newY < 0\r\n                ? newArt.rows.length + newY\r\n                : newY;\r\n          });\r\n          if (x > 0) {\r\n            newArt.rows[ind] = row\r\n              .slice(row.length - x)\r\n              .concat(row.slice(0, row.length - x));\r\n          } else {\r\n            newArt.rows[ind] = row\r\n              .slice(Math.abs(x))\r\n              .concat(row.slice(0, Math.abs(x)));\r\n          }\r\n        });\r\n        if (y > 0) {\r\n          newArt.rows = newArt.rows\r\n            .slice(newArt.rows.length - y)\r\n            .concat(newArt.rows.slice(0, newArt.rows.length - y));\r\n        } else {\r\n          newArt.rows = newArt.rows\r\n            .slice(Math.abs(y))\r\n            .concat(newArt.rows.slice(0, Math.abs(y)));\r\n        }\r\n        artsDispatch({\r\n          type: \"UPD_ART\",\r\n          data: newArt,\r\n          artId: arts.chosen!,\r\n        });\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = arts.arts!.find((art) => art.id === arts.chosen)!;\r\n  }\r\n\r\n  const ps = (600 + settings!.columnSize) / settings!.columnSize;\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onDragStart}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}