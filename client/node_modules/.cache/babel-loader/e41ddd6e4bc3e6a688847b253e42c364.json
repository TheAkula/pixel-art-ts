{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport createArt from \"../../hoc/createArt\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const [updating, setUpdating] = useState(false);\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const [draggedPixels, setDraggedPixels] = useState(null);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (arts.chosen === null) {\n      const rows = createArt(settings);\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: rows,\n          id: arts.arts.length\n        }\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const onDragEnd = e => {\n    e.preventDefault();\n    setDraggedPixels(null);\n    document.removeEventListener(\"dragend\", onDragEnd);\n  };\n\n  const onDragStart = e => {\n    const clone = e.target.cloneNode(true);\n    clone.style.display = \"none\";\n    e.dataTransfer.setDragImage(clone, 0, 0);\n    document.addEventListener(\"dragend\", onDragEnd);\n  };\n\n  const pixelClickedHandler = (xpos, ypos, color) => {\n    return e => {\n      e.preventDefault();\n\n      switch (settings.tool) {\n        case \"BRUSH\":\n          let isUpdated = false;\n          setUpdating(prevUpdating => {\n            if (prevUpdating) {\n              isUpdated = true;\n              return prevUpdating;\n            }\n\n            return true;\n          });\n\n          if (!isUpdated) {\n            new Promise((res, rej) => {\n              res(artsDispatch({\n                type: \"SET_PIX\",\n                artId: arts.chosen,\n                data: settings.color,\n                x: xpos,\n                y: ypos\n              }));\n            }).then(data => {\n              setUpdating(prevUpdating => false);\n            });\n          } // if (!updating) {\n          //   setUpdating(true);\n          //   new Promise((res, rej) => {\n          //     res(\n          //       artsDispatch({\n          //         type: \"SET_PIX\",\n          //         artId: arts.chosen!,\n          //         data: settings!.color,\n          //         x: xpos,\n          //         y: ypos,\n          //       })\n          //     );\n          //   }).then((data) => {\n          //     setUpdating((prevUpdating) => false);\n          //   });\n          // }\n\n\n          break;\n\n        case \"ERASER\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.defColor,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"FILL\":\n          const art = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n\n          const fillPix = (x, y) => {\n            const checkPix = (xp, yp) => {\n              if (yp > art.rows.length - 1 || yp < 0 || xp > art.rows[yp].length || xp < 0) return false;\n              const pix = art.rows[yp][xp];\n              if (!pix) return false;\n              const colorP = pix.color;\n              return colorP !== settings.color && colorP === color;\n            };\n\n            art.rows[y][x].color = settings.color;\n\n            if (checkPix(x + 1, y)) {\n              fillPix(x + 1, y);\n            }\n\n            if (checkPix(x, y + 1)) {\n              fillPix(x, y + 1);\n            }\n\n            if (checkPix(x, y - 1)) {\n              fillPix(x, y - 1);\n            }\n\n            if (checkPix(x - 1, y)) {\n              fillPix(x - 1, y);\n            }\n          };\n\n          fillPix(xpos, ypos);\n          artsDispatch({\n            type: \"UPD_ART\",\n            artId: arts.chosen,\n            data: art\n          });\n          break;\n\n        case \"PIPETTE\":\n          settingsDispatch({\n            type: \"SET_COLOR\",\n            data: color\n          });\n          break;\n\n        case \"MOVE\":\n          let dragPix = draggedPixels;\n\n          if (!dragPix) {\n            setDraggedPixels({\n              x: xpos,\n              y: ypos\n            });\n            dragPix = {\n              x: xpos,\n              y: ypos\n            };\n          }\n\n          let x = xpos - dragPix.x;\n          let y = ypos - dragPix.y;\n\n          if (x > 0) {\n            x = Math.floor(x / 2);\n          } else {\n            x = Math.ceil(x / 2);\n          }\n\n          if (y > 0) {\n            y = Math.floor(y / 2);\n          } else {\n            y = Math.ceil(y / 2);\n          }\n\n          if (Math.abs(x) === 1) {\n            setDraggedPixels({\n              x: xpos,\n              y: draggedPixels.y\n            });\n          }\n\n          if (Math.abs(y) === 1) {\n            setDraggedPixels({\n              x: draggedPixels.x,\n              y: ypos\n            });\n          }\n\n          const newArt = JSON.parse(JSON.stringify(arts.arts.find(art => art.id === arts.chosen)));\n          newArt.rows.forEach((row, ind) => {\n            row.forEach(pix => {\n              const newX = pix.xpos + x;\n              const newY = pix.ypos + y;\n              pix.xpos = newX > row.length - 1 ? newX - row.length : newX < 0 ? row.length + newX : newX;\n              pix.ypos = newY > newArt.rows.length - 1 ? newY - newArt.rows.length : newY < 0 ? newArt.rows.length + newY : newY;\n            });\n\n            if (x > 0) {\n              newArt.rows[ind] = row.slice(row.length - x).concat(row.slice(0, row.length - x));\n            } else {\n              newArt.rows[ind] = row.slice(Math.abs(x)).concat(row.slice(0, Math.abs(x)));\n            }\n          });\n\n          if (y > 0) {\n            newArt.rows = newArt.rows.slice(newArt.rows.length - y).concat(newArt.rows.slice(0, newArt.rows.length - y));\n          } else {\n            newArt.rows = newArt.rows.slice(Math.abs(y)).concat(newArt.rows.slice(0, Math.abs(y)));\n          }\n\n          artsDispatch({\n            type: \"UPD_ART\",\n            data: newArt,\n            artId: arts.chosen\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = arts.arts.find(art => art.id === arts.chosen);\n  }\n\n  const ps = 600 / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onDragStart,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"tOzrMTxa+lTrLg+e3mRnC05Ti54=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","createArt","SettingsContext","ArtsContext","useContext","useEffect","useRef","useState","Pixel","Board","updating","setUpdating","settings","settingsDispatch","arts","artsDispatch","draggedPixels","setDraggedPixels","boardRef","chosen","rows","type","data","id","length","onDragEnd","e","preventDefault","document","removeEventListener","onDragStart","clone","target","cloneNode","style","display","dataTransfer","setDragImage","addEventListener","pixelClickedHandler","xpos","ypos","color","tool","isUpdated","prevUpdating","Promise","res","rej","artId","x","y","then","defColor","art","JSON","parse","stringify","find","fillPix","checkPix","xp","yp","pix","colorP","dragPix","Math","floor","ceil","abs","newArt","forEach","row","ind","newX","newY","slice","concat","ps","columnSize","map","arr","pixel","toString"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\nimport createArt from \"../../hoc/createArt\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const [updating, setUpdating] = useState(false);\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const [draggedPixels, setDraggedPixels] = useState<null | {\r\n    x: number;\r\n    y: number;\r\n  }>(null);\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (arts.chosen === null) {\r\n      const rows = createArt(settings!);\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: rows,\r\n          id: arts.arts.length,\r\n        },\r\n      });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const onDragEnd: EventListener = (e) => {\r\n    e.preventDefault();\r\n    setDraggedPixels(null);\r\n    document.removeEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const onDragStart: DragEventHandler = (e) => {\r\n    const clone = (e.target as HTMLElement).cloneNode(true);\r\n    (clone as HTMLElement).style.display = \"none\";\r\n    e.dataTransfer.setDragImage(clone as Element, 0, 0);\r\n    document.addEventListener(\"dragend\", onDragEnd);\r\n  };\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number, color: string) => {\r\n    return ((e) => {\r\n      e.preventDefault();\r\n\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          let isUpdated = false;\r\n          setUpdating((prevUpdating) => {\r\n            if (prevUpdating) {\r\n              isUpdated = true;\r\n              return prevUpdating;\r\n            }\r\n            return true;\r\n          });\r\n          if (!isUpdated) {\r\n            new Promise((res, rej) => {\r\n              res(\r\n                artsDispatch({\r\n                  type: \"SET_PIX\",\r\n                  artId: arts.chosen!,\r\n                  data: settings!.color,\r\n                  x: xpos,\r\n                  y: ypos,\r\n                })\r\n              );\r\n            }).then((data) => {\r\n              setUpdating((prevUpdating) => false);\r\n            });\r\n          }\r\n          // if (!updating) {\r\n          //   setUpdating(true);\r\n          //   new Promise((res, rej) => {\r\n          //     res(\r\n          //       artsDispatch({\r\n          //         type: \"SET_PIX\",\r\n          //         artId: arts.chosen!,\r\n          //         data: settings!.color,\r\n          //         x: xpos,\r\n          //         y: ypos,\r\n          //       })\r\n          //     );\r\n          //   }).then((data) => {\r\n          //     setUpdating((prevUpdating) => false);\r\n          //   });\r\n          // }\r\n\r\n          break;\r\n        case \"ERASER\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.defColor,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"FILL\":\r\n          const art: Art = JSON.parse(\r\n            JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n          );\r\n          const fillPix = (x: number, y: number) => {\r\n            const checkPix = (xp: number, yp: number): boolean => {\r\n              if (\r\n                yp > art.rows.length - 1 ||\r\n                yp < 0 ||\r\n                xp > art.rows[yp].length ||\r\n                xp < 0\r\n              )\r\n                return false;\r\n              const pix = art.rows[yp][xp];\r\n              if (!pix) return false;\r\n              const colorP = pix.color;\r\n              return colorP !== settings!.color && colorP === color;\r\n            };\r\n            art.rows[y][x].color = settings!.color;\r\n\r\n            if (checkPix(x + 1, y)) {\r\n              fillPix(x + 1, y);\r\n            }\r\n            if (checkPix(x, y + 1)) {\r\n              fillPix(x, y + 1);\r\n            }\r\n            if (checkPix(x, y - 1)) {\r\n              fillPix(x, y - 1);\r\n            }\r\n            if (checkPix(x - 1, y)) {\r\n              fillPix(x - 1, y);\r\n            }\r\n          };\r\n          fillPix(xpos, ypos);\r\n          artsDispatch({ type: \"UPD_ART\", artId: arts.chosen!, data: art });\r\n          break;\r\n        case \"PIPETTE\":\r\n          settingsDispatch!({ type: \"SET_COLOR\", data: color });\r\n          break;\r\n        case \"MOVE\":\r\n          let dragPix = draggedPixels;\r\n          if (!dragPix) {\r\n            setDraggedPixels({ x: xpos, y: ypos });\r\n            dragPix = { x: xpos, y: ypos };\r\n          }\r\n          let x = xpos - dragPix!.x;\r\n          let y = ypos - dragPix!.y;\r\n          if (x > 0) {\r\n            x = Math.floor(x / 2);\r\n          } else {\r\n            x = Math.ceil(x / 2);\r\n          }\r\n          if (y > 0) {\r\n            y = Math.floor(y / 2);\r\n          } else {\r\n            y = Math.ceil(y / 2);\r\n          }\r\n\r\n          if (Math.abs(x) === 1) {\r\n            setDraggedPixels({ x: xpos, y: draggedPixels!.y });\r\n          }\r\n          if (Math.abs(y) === 1) {\r\n            setDraggedPixels({ x: draggedPixels!.x, y: ypos });\r\n          }\r\n          const newArt = JSON.parse(\r\n            JSON.stringify(arts.arts.find((art) => art.id === arts.chosen))\r\n          ) as Art;\r\n          newArt.rows.forEach((row, ind) => {\r\n            row.forEach((pix) => {\r\n              const newX = pix.xpos + x;\r\n              const newY = pix.ypos + y;\r\n              pix.xpos =\r\n                newX > row.length - 1\r\n                  ? newX - row.length\r\n                  : newX < 0\r\n                  ? row.length + newX\r\n                  : newX;\r\n              pix.ypos =\r\n                newY > newArt.rows.length - 1\r\n                  ? newY - newArt.rows.length\r\n                  : newY < 0\r\n                  ? newArt.rows.length + newY\r\n                  : newY;\r\n            });\r\n            if (x > 0) {\r\n              newArt.rows[ind] = row\r\n                .slice(row.length - x)\r\n                .concat(row.slice(0, row.length - x));\r\n            } else {\r\n              newArt.rows[ind] = row\r\n                .slice(Math.abs(x))\r\n                .concat(row.slice(0, Math.abs(x)));\r\n            }\r\n          });\r\n          if (y > 0) {\r\n            newArt.rows = newArt.rows\r\n              .slice(newArt.rows.length - y)\r\n              .concat(newArt.rows.slice(0, newArt.rows.length - y));\r\n          } else {\r\n            newArt.rows = newArt.rows\r\n              .slice(Math.abs(y))\r\n              .concat(newArt.rows.slice(0, Math.abs(y)));\r\n          }\r\n          artsDispatch({\r\n            type: \"UPD_ART\",\r\n            data: newArt,\r\n            artId: arts.chosen!,\r\n          });\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = arts.arts!.find((art) => art.id === arts.chosen)!;\r\n  }\r\n\r\n  const ps = 600 / settings!.columnSize;\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onDragStart}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}