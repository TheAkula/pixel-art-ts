{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\ToolsBar\\\\ToolsBar.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./ToolsBar.module.css\";\nimport Brush from \"./Brush/Brush\";\nimport { useContext } from \"react\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToolsBar = () => {\n  _s();\n\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n\n  const onClickHandler = id => {\n    return e => {\n      switch (id) {\n        case \"BRUSH\":\n          e.target.closest(classes.Tool).classList.toggle(\"active\");\n          settingsDispatch({\n            type: \"SET_TOOL\",\n            data: settings.tool === id ? null : id\n          });\n          break;\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.ToolsBar,\n    children: /*#__PURE__*/_jsxDEV(Brush, {\n      classes: [classes.Tool, classes.Brush],\n      clicked: onClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToolsBar, \"72JFhWNFdBAqBjw/YgDgzRO+bkY=\");\n\n_c = ToolsBar;\nexport default ToolsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToolsBar\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/ToolsBar/ToolsBar.tsx"],"names":["classes","Brush","useContext","SettingsContext","ToolsBar","settings","settingsDispatch","onClickHandler","id","e","target","closest","Tool","classList","toggle","type","data","tool"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,uBAApB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAA4BC,UAA5B,QAA8C,OAA9C;AAEA,SAASC,eAAT,QAAgC,gCAAhC;;;AAOA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAiCJ,UAAU,CAACC,eAAD,CAAjD;;AAEA,QAAMI,cAAc,GAAIC,EAAD,IAAgB;AACrC,WAASC,CAAD,IAAO;AACb,cAAQD,EAAR;AACE,aAAK,OAAL;AACGC,UAAAA,CAAC,CAACC,MAAH,CACGC,OADH,CACWX,OAAO,CAACY,IADnB,EAEGC,SAFH,CAEaC,MAFb,CAEoB,QAFpB;AAGAR,UAAAA,gBAAgB,CAAE;AAChBS,YAAAA,IAAI,EAAE,UADU;AAEhBC,YAAAA,IAAI,EAAEX,QAAQ,CAAEY,IAAV,KAAmBT,EAAnB,GAAwB,IAAxB,GAA+BA;AAFrB,WAAF,CAAhB;AAIA;AATJ;AAWD,KAZD;AAaD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAER,OAAO,CAACI,QAAxB;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,CAACJ,OAAO,CAACY,IAAT,EAAeZ,OAAO,CAACC,KAAvB,CAAhB;AAA+C,MAAA,OAAO,EAAEM;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBD;;GAAMH,Q;;KAAAA,Q;AA0BN,eAAeA,QAAf","sourcesContent":["import classes from \"./ToolsBar.module.css\";\r\n\r\nimport Brush from \"./Brush/Brush\";\r\nimport { MouseEventHandler, useContext } from \"react\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\n\r\nexport interface ToolProps {\r\n  clicked: (id: string) => MouseEventHandler<HTMLButtonElement>;\r\n  classes: string[];\r\n}\r\n\r\nconst ToolsBar = () => {\r\n  const { settings, settingsDispatch } = useContext(SettingsContext);\r\n\r\n  const onClickHandler = (id: string) => {\r\n    return ((e) => {\r\n      switch (id) {\r\n        case \"BRUSH\":\r\n          (e.target as HTMLButtonElement)\r\n            .closest(classes.Tool)!\r\n            .classList.toggle(\"active\");\r\n          settingsDispatch!({\r\n            type: \"SET_TOOL\",\r\n            data: settings!.tool === id ? null : id,\r\n          });\r\n          break;\r\n      }\r\n    }) as MouseEventHandler<HTMLButtonElement>;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.ToolsBar}>\r\n      <Brush classes={[classes.Tool, classes.Brush]} clicked={onClickHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolsBar;\r\n"]},"metadata":{},"sourceType":"module"}