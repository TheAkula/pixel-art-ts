{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\SettingsBar\\\\PreviewAnimation\\\\PreviewAnimation.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useContext, useEffect, useState, useRef } from \"react\";\nimport classes from \"./PreviewAnimation.module.css\";\nimport SimplePixel from \"../../SimplePixel/SimplePixel\";\nimport { ArtsContext } from \"../../../context/arts-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PreviewAnimation = () => {\n  _s();\n\n  const [duration, setDuration] = useState(1);\n  const [play, setPlay] = useState(false);\n  const {\n    arts\n  } = useContext(ArtsContext);\n  const [artToShow, setArtToShow] = useState(null);\n  let timer = useRef(null);\n  const updateArtToShow = useCallback(() => {\n    let index = artToShow.id + 1;\n\n    if (index === arts.arts.length) {\n      index = 0;\n    }\n\n    const art = arts.arts.find(art => art.id === index);\n    console.log(artToShow, art);\n    setArtToShow(art);\n  }, [arts.arts, artToShow]);\n  useEffect(() => {\n    if (!play) {\n      const art = arts.arts.find(art => art.id === arts.chosen);\n      setArtToShow(art);\n    }\n  }, [arts, play]);\n  useEffect(() => {\n    if (play) {\n      if (timer.current === null) {\n        timer.current = setInterval(updateArtToShow, duration * 1000);\n      }\n    } else if (timer.current !== null) {\n      clearInterval(timer.current);\n      timer.current = null;\n    }\n  }, [play, duration, updateArtToShow, artToShow]);\n\n  const onTogglePlayHandler = () => {\n    setPlay(!play);\n  };\n\n  const ps = 6;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.PreviewAnimation,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.PlayButton,\n      onClick: onTogglePlayHandler,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-6 w-6\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: \"2\",\n          d: \"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: \"2\",\n          d: \"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.PreviewAnimationSpace,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: artToShow && artToShow.rows.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.Row,\n          children: row.map(pix => /*#__PURE__*/_jsxDEV(SimplePixel, {\n            ps: ps,\n            pix: pix\n          }, pix.ypos.toString() + pix.xpos, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this))\n        }, artToShow.rows.indexOf(row), false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviewAnimation, \"VXVKvDp2E9PdTMiOpiQR9SW0/Pc=\");\n\n_c = PreviewAnimation;\nexport default PreviewAnimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviewAnimation\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/SettingsBar/PreviewAnimation/PreviewAnimation.tsx"],"names":["useCallback","useContext","useEffect","useState","useRef","classes","SimplePixel","ArtsContext","PreviewAnimation","duration","setDuration","play","setPlay","arts","artToShow","setArtToShow","timer","updateArtToShow","index","id","length","art","find","console","log","chosen","current","setInterval","clearInterval","onTogglePlayHandler","ps","PlayButton","PreviewAnimationSpace","rows","map","row","Row","pix","ypos","toString","xpos","indexOf"],"mappings":"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","sourcesContent":["import { useCallback, useContext, useEffect, useState, useRef } from \"react\";\r\n\r\nimport classes from \"./PreviewAnimation.module.css\";\r\nimport SimplePixel from \"../../SimplePixel/SimplePixel\";\r\n\r\nimport { Art, ArtsContext } from \"../../../context/arts-context\";\r\n\r\nconst PreviewAnimation = () => {\r\n  const [duration, setDuration] = useState(1);\r\n  const [play, setPlay] = useState(false);\r\n  const { arts } = useContext(ArtsContext)!;\r\n  const [artToShow, setArtToShow] = useState<null | Art>(null);\r\n  let timer = useRef<null | NodeJS.Timer>(null);\r\n\r\n  const updateArtToShow = useCallback(() => {\r\n    let index = artToShow!.id + 1;\r\n    if (index === arts.arts.length) {\r\n      index = 0;\r\n    }\r\n    const art = arts.arts.find((art) => art.id === index)!;\r\n    console.log(artToShow, art);\r\n    setArtToShow(art);\r\n  }, [arts.arts, artToShow]);\r\n\r\n  useEffect(() => {\r\n    if (!play) {\r\n      const art = arts.arts.find((art) => art.id === arts.chosen)!;\r\n      setArtToShow(art);\r\n    }\r\n  }, [arts, play]);\r\n\r\n  useEffect(() => {\r\n    if (play) {\r\n      if (timer.current === null) {\r\n        timer.current = setInterval(updateArtToShow, duration * 1000);\r\n      }\r\n    } else if (timer.current !== null) {\r\n      clearInterval(timer.current);\r\n      timer.current = null;\r\n    }\r\n  }, [play, duration, updateArtToShow, artToShow]);\r\n\r\n  const onTogglePlayHandler = () => {\r\n    setPlay(!play);\r\n  };\r\n\r\n  const ps = 6;\r\n\r\n  return (\r\n    <div className={classes.PreviewAnimation}>\r\n      <button className={classes.PlayButton} onClick={onTogglePlayHandler}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-6 w-6\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\r\n          />\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n      <div className={classes.PreviewAnimationSpace}>\r\n        <div>\r\n          {artToShow &&\r\n            artToShow.rows.map((row) => (\r\n              <div className={classes.Row} key={artToShow.rows.indexOf(row)}>\r\n                {row.map((pix) => (\r\n                  <SimplePixel\r\n                    key={pix.ypos.toString() + pix.xpos}\r\n                    ps={ps}\r\n                    pix={pix}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviewAnimation;\r\n"]},"metadata":{},"sourceType":"module"}