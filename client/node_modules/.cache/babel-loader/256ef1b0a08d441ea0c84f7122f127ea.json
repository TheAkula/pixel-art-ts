{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\client\\\\src\\\\context\\\\history-context.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HistoryContext = /*#__PURE__*/React.createContext(null);\nconst initalState = {\n  prevHistory: [],\n  nextHistory: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"add\":\n      return { ...state,\n        prevHistory: state.prevHistory.concat(action.data),\n        nextHistory: []\n      };\n\n    case \"prev\":\n      const lastFunc = state.prevHistory.at(-1);\n      lastFunc.prev();\n      return { ...state,\n        prevHistory: state.prevHistory.slice(0, -1),\n        nextHistory: state.nextHistory.concat(lastFunc)\n      };\n\n    case \"next\":\n      const func = state.nextHistory.at(-1);\n      func.next();\n      return { ...state,\n        prevHistory: state.prevHistory.concat(func),\n        nextHistory: state.nextHistory.slice(0, -1)\n      };\n\n    default:\n      throw new Error(\"Uncaught type: \" + action.type);\n  }\n};\n\nconst HistoryContextProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initalState);\n  return /*#__PURE__*/_jsxDEV(HistoryContext.Provider, {\n    value: {\n      historyState: state,\n      historyDispatch: dispatch\n    },\n    children: props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HistoryContextProvider, \"MfeFq/YeXq1laAm5Bb2FPVG97dI=\");\n\n_c = HistoryContextProvider;\nexport default HistoryContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoryContextProvider\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/client/src/context/history-context.tsx"],"names":["React","useReducer","HistoryContext","createContext","initalState","prevHistory","nextHistory","reducer","state","action","type","concat","data","lastFunc","at","prev","slice","func","next","Error","HistoryContextProvider","props","dispatch","historyState","historyDispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAA4BC,UAA5B,QAAwD,OAAxD;;AAyBA,OAAO,MAAMC,cAAc,gBAAGF,KAAK,CAACG,aAAN,CAC5B,IAD4B,CAAvB;AAIP,MAAMC,WAAW,GAAG;AAClBC,EAAAA,WAAW,EAAE,EADK;AAElBC,EAAAA,WAAW,EAAE;AAFK,CAApB;;AAKA,MAAMC,OAAuB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELH,QAAAA,WAAW,EAAEG,KAAK,CAACH,WAAN,CAAkBM,MAAlB,CAAyBF,MAAM,CAACG,IAAhC,CAFR;AAGLN,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAKF,SAAK,MAAL;AACE,YAAMO,QAAQ,GAAGL,KAAK,CAACH,WAAN,CAAkBS,EAAlB,CAAqB,CAAC,CAAtB,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT;AACA,aAAO,EACL,GAAGP,KADE;AAELH,QAAAA,WAAW,EAAEG,KAAK,CAACH,WAAN,CAAkBW,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,CAFR;AAGLV,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBK,MAAlB,CAAyBE,QAAzB;AAHR,OAAP;;AAKF,SAAK,MAAL;AACE,YAAMI,IAAI,GAAGT,KAAK,CAACF,WAAN,CAAkBQ,EAAlB,CAAqB,CAAC,CAAtB,CAAb;AACAG,MAAAA,IAAI,CAACC,IAAL;AACA,aAAO,EACL,GAAGV,KADE;AAELH,QAAAA,WAAW,EAAEG,KAAK,CAACH,WAAN,CAAkBM,MAAlB,CAAyBM,IAAzB,CAFR;AAGLX,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBU,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B;AAHR,OAAP;;AAKF;AACE,YAAM,IAAIG,KAAJ,CAAU,oBAAoBV,MAAM,CAACC,IAArC,CAAN;AAxBJ;AA0BD,CA3BD;;AA6BA,MAAMU,sBAAsB,GAAIC,KAAD,IAAgB;AAAA;;AAC7C,QAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBrB,UAAU,CAACM,OAAD,EAAUH,WAAV,CAApC;AAEA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AAAEmB,MAAAA,YAAY,EAAEf,KAAhB;AAAuBgB,MAAAA,eAAe,EAAEF;AAAxC,KADT;AAAA,cAGGD;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAVD;;GAAMD,sB;;KAAAA,sB;AAYN,eAAeA,sBAAf","sourcesContent":["import React, { useContext, useReducer, useState } from \"react\";\r\n\r\ninterface HistoryProviderValue {\r\n  historyState: HistoryState;\r\n  historyDispatch: React.Dispatch<HistoryReducerAction>;\r\n}\r\n\r\ninterface HistoryState {\r\n  prevHistory: History;\r\n  nextHistory: History;\r\n}\r\n\r\ntype History = HistoryItem[];\r\n\r\ntype HistoryItem = { prev: () => void; next: () => void };\r\n\r\ninterface HistoryReducerAction {\r\n  type: \"add\" | \"prev\" | \"next\";\r\n  data?: HistoryItem;\r\n}\r\n\r\ninterface HistoryReducer {\r\n  (state: HistoryState, action: HistoryReducerAction): HistoryState;\r\n}\r\n\r\nexport const HistoryContext = React.createContext<null | HistoryProviderValue>(\r\n  null\r\n);\r\n\r\nconst initalState = {\r\n  prevHistory: [],\r\n  nextHistory: [],\r\n};\r\n\r\nconst reducer: HistoryReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return {\r\n        ...state,\r\n        prevHistory: state.prevHistory.concat(action.data!),\r\n        nextHistory: [],\r\n      };\r\n    case \"prev\":\r\n      const lastFunc = state.prevHistory.at(-1)!;\r\n      lastFunc.prev();\r\n      return {\r\n        ...state,\r\n        prevHistory: state.prevHistory.slice(0, -1),\r\n        nextHistory: state.nextHistory.concat(lastFunc),\r\n      };\r\n    case \"next\":\r\n      const func = state.nextHistory.at(-1)!;\r\n      func.next();\r\n      return {\r\n        ...state,\r\n        prevHistory: state.prevHistory.concat(func),\r\n        nextHistory: state.nextHistory.slice(0, -1),\r\n      };\r\n    default:\r\n      throw new Error(\"Uncaught type: \" + action.type);\r\n  }\r\n};\r\n\r\nconst HistoryContextProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer(reducer, initalState);\r\n\r\n  return (\r\n    <HistoryContext.Provider\r\n      value={{ historyState: state, historyDispatch: dispatch }}\r\n    >\r\n      {props}\r\n    </HistoryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default HistoryContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}