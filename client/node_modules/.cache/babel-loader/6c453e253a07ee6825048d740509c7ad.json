{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport { SettingsContext } from \"../../context/settings-context\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (!arts.chosen) {\n      const board = [];\n\n      for (let i = 0; i < settings.rowSize; i++) {\n        let arr = [];\n\n        for (let j = 0; j < settings.columnSize; j++) {\n          arr.push({\n            xpos: j,\n            ypos: i,\n            color: settings.defColor\n          });\n        }\n\n        board.push(arr);\n      }\n\n      const id = Math.random().toString();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: board,\n          id: id\n        }\n      });\n      artsDispatch({\n        type: \"SET_CHOSEN\",\n        data: id\n      });\n    }\n  }, [artsDispatch, settings, arts]);\n\n  const customListener = (elem, type, func) => {\n    elem.addEventListener(type, func);\n    return () => {\n      elem.removeEventListener(type, func);\n    };\n  };\n\n  const onStartBrush = e => {};\n\n  const pixelClickedHandler = (xpos, ypos) => {\n    return e => {\n      switch (settings.tool) {\n        case \"BRUSH\":\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: arts.chosen,\n            data: settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (arts.arts.length) {\n    art = { ...arts.arts.find(art => art.id === arts.chosen)\n    };\n  }\n\n  const ps = (600 - settings.columnSize + 1) / settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.BoardLine,\n        children: arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n          size: ps,\n          clicked: pixelClickedHandler,\n          dragStarted: onStartBrush,\n          ...pixel\n        }, pixel.ypos.toString() + pixel.xpos, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this))\n      }, art.rows.indexOf(arr), false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"TyzQXQeqdW77rY9qrZp8aW/BSu4=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/Board/Board.tsx"],"names":["classes","SettingsContext","ArtsContext","useContext","useEffect","useRef","Pixel","Board","settings","arts","artsDispatch","boardRef","chosen","board","i","rowSize","arr","j","columnSize","push","xpos","ypos","color","defColor","id","Math","random","toString","type","data","rows","customListener","elem","func","addEventListener","removeEventListener","onStartBrush","e","pixelClickedHandler","tool","artId","x","y","art","length","find","ps","map","BoardLine","pixel","indexOf"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\n\r\nimport { SettingsContext } from \"../../context/settings-context\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  DragEventHandler,\r\n  EventHandler,\r\n  MouseEvent,\r\n  MouseEventHandler,\r\n  SyntheticEvent,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts, artsDispatch } = useContext(ArtsContext)!;\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!arts.chosen) {\r\n      const board: { xpos: number; ypos: number; color: string }[][] = [];\r\n      for (let i = 0; i < settings!.rowSize; i++) {\r\n        let arr = [];\r\n        for (let j = 0; j < settings!.columnSize; j++) {\r\n          arr.push({ xpos: j, ypos: i, color: settings!.defColor });\r\n        }\r\n        board.push(arr);\r\n      }\r\n      const id = Math.random().toString();\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: board,\r\n          id: id,\r\n        },\r\n      });\r\n      artsDispatch({ type: \"SET_CHOSEN\", data: id });\r\n    }\r\n  }, [artsDispatch, settings, arts]);\r\n\r\n  const customListener = (\r\n    elem: Element | Document,\r\n    type: string,\r\n    func: EventListener\r\n  ) => {\r\n    elem.addEventListener(type, func);\r\n    return () => {\r\n      elem.removeEventListener(type, func);\r\n    };\r\n  };\r\n\r\n  const onStartBrush: DragEventHandler = (e) => {};\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number) => {\r\n    return ((e) => {\r\n      switch (settings!.tool) {\r\n        case \"BRUSH\":\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: arts.chosen!,\r\n            data: settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (arts.arts.length) {\r\n    art = { ...arts.arts!.find((art) => art.id === arts.chosen)! };\r\n  }\r\n\r\n  const ps = (600 - settings!.columnSize + 1) / settings!.columnSize;\r\n\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return (\r\n            <div className={classes.BoardLine} key={art!.rows.indexOf(arr)}>\r\n              {arr.map((pixel) => (\r\n                <Pixel\r\n                  size={ps}\r\n                  clicked={pixelClickedHandler}\r\n                  dragStarted={onStartBrush}\r\n                  key={pixel.ypos.toString() + pixel.xpos}\r\n                  {...pixel}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}