{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\client\\\\src\\\\components\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Board.module.css\";\nimport createArt from \"../../hoc/createArt\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport Pixel from \"./Pixel/Pixel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const [isDraw, setIsDraw] = useState(false);\n  const {\n    artsState,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const [draggedPixels, setDraggedPixels] = useState(null);\n  const boardRef = useRef(null);\n  useEffect(() => {\n    if (artsState.chosen === null) {\n      const rows = createArt(artsState.settings);\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          rows: rows,\n          id: artsState.arts.length\n        }\n      });\n    }\n  }, [artsDispatch, artsState.settings, artsState]);\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", onMouseUp);\n    document.addEventListener(\"dragstart\", e => e.preventDefault());\n  }, []);\n\n  const onMouseDown = () => {\n    setIsDraw(true);\n  };\n\n  const onMouseUp = () => {\n    setIsDraw(false);\n    setDraggedPixels(null);\n  };\n\n  const pixelClickedHandler = (xpos, ypos, color) => {\n    return e => {\n      e.preventDefault();\n\n      switch (artsState.settings.tool) {\n        case \"BRUSH\":\n          if (color === artsState.settings.color) return;\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: artsState.chosen,\n            data: artsState.settings.color,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"ERASER\":\n          if (color === artsState.settings.defColor) return;\n          artsDispatch({\n            type: \"SET_PIX\",\n            artId: artsState.chosen,\n            data: artsState.settings.defColor,\n            x: xpos,\n            y: ypos\n          });\n          break;\n\n        case \"FILL\":\n          const art = JSON.parse(JSON.stringify(artsState.arts.find(art => art.id === artsState.chosen)));\n\n          const fillPix = (x, y) => {\n            const checkPix = (xp, yp) => {\n              if (yp > art.rows.length - 1 || yp < 0 || xp > art.rows[yp].length || xp < 0) return false;\n              const pix = art.rows[yp][xp];\n              if (!pix) return false;\n              const colorP = pix.color;\n              return colorP !== artsState.settings.color && colorP === color;\n            };\n\n            art.rows[y][x].color = artsState.settings.color;\n\n            if (checkPix(x + 1, y)) {\n              fillPix(x + 1, y);\n            }\n\n            if (checkPix(x, y + 1)) {\n              fillPix(x, y + 1);\n            }\n\n            if (checkPix(x, y - 1)) {\n              fillPix(x, y - 1);\n            }\n\n            if (checkPix(x - 1, y)) {\n              fillPix(x - 1, y);\n            }\n          };\n\n          fillPix(xpos, ypos);\n          artsDispatch({\n            type: \"UPD_ART\",\n            artId: artsState.chosen,\n            data: art\n          });\n          break;\n\n        case \"PIPETTE\":\n          artsDispatch({\n            type: \"SET_COLOR\",\n            data: color\n          });\n          break;\n\n        case \"MOVE\":\n          console.log(\"move event\");\n          let dragPix = draggedPixels;\n\n          if (!dragPix) {\n            setDraggedPixels({\n              x: xpos,\n              y: ypos\n            });\n            dragPix = {\n              x: xpos,\n              y: ypos\n            };\n          }\n\n          let x = xpos - dragPix.x;\n          let y = ypos - dragPix.y;\n\n          if (x > 0) {\n            x = Math.floor(x / 2);\n          } else {\n            x = Math.ceil(x / 2);\n          }\n\n          if (y > 0) {\n            y = Math.floor(y / 2);\n          } else {\n            y = Math.ceil(y / 2);\n          }\n\n          if (Math.abs(x) === 1) {\n            setDraggedPixels({\n              x: xpos,\n              y: draggedPixels.y\n            });\n          }\n\n          if (Math.abs(y) === 1) {\n            setDraggedPixels({\n              x: draggedPixels.x,\n              y: ypos\n            });\n          }\n\n          const newArt = JSON.parse(JSON.stringify(artsState.arts.find(art => art.id === artsState.chosen)));\n          newArt.rows.forEach((row, ind) => {\n            row.forEach(pix => {\n              const newX = pix.xpos + x;\n              const newY = pix.ypos + y;\n              pix.xpos = newX > row.length - 1 ? newX - row.length : newX < 0 ? row.length + newX : newX;\n              pix.ypos = newY > newArt.rows.length - 1 ? newY - newArt.rows.length : newY < 0 ? newArt.rows.length + newY : newY;\n            });\n\n            if (x > 0) {\n              newArt.rows[ind] = row.slice(row.length - x).concat(row.slice(0, row.length - x));\n            } else {\n              newArt.rows[ind] = row.slice(Math.abs(x)).concat(row.slice(0, Math.abs(x)));\n            }\n          });\n\n          if (y > 0) {\n            newArt.rows = newArt.rows.slice(newArt.rows.length - y).concat(newArt.rows.slice(0, newArt.rows.length - y));\n          } else {\n            newArt.rows = newArt.rows.slice(Math.abs(y)).concat(newArt.rows.slice(0, Math.abs(y)));\n          }\n\n          artsDispatch({\n            type: \"UPD_ART\",\n            data: newArt,\n            artId: artsState.chosen\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n  };\n\n  let art = null;\n\n  if (artsState.arts.length) {\n    art = artsState.arts.find(art => art.id === artsState.chosen);\n  }\n\n  const ps = 500 / artsState.settings.columnSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: classes.Board,\n    children: art && art.rows.map(arr => {\n      return arr.map(pixel => /*#__PURE__*/_jsxDEV(Pixel, {\n        isDrawing: isDraw,\n        size: ps,\n        clicked: pixelClickedHandler,\n        dragStarted: onMouseDown,\n        ...pixel\n      }, pixel.ypos.toString() + pixel.xpos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"lV2kUIQf8sCiHEn+ftgKV9YtVFQ=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/client/src/components/Board/Board.tsx"],"names":["classes","createArt","ArtsContext","useContext","useEffect","useRef","useState","Pixel","Board","isDraw","setIsDraw","artsState","artsDispatch","draggedPixels","setDraggedPixels","boardRef","chosen","rows","settings","type","data","id","arts","length","document","addEventListener","onMouseUp","e","preventDefault","onMouseDown","pixelClickedHandler","xpos","ypos","color","tool","artId","x","y","defColor","art","JSON","parse","stringify","find","fillPix","checkPix","xp","yp","pix","colorP","console","log","dragPix","Math","floor","ceil","abs","newArt","forEach","row","ind","newX","newY","slice","concat","ps","columnSize","map","arr","pixel","toString"],"mappings":"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","sourcesContent":["import classes from \"./Board.module.css\";\r\nimport createArt from \"../../hoc/createArt\";\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport {\r\n  MouseEventHandler,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Art } from \"../../context/arts-context\";\r\n\r\nimport Pixel from \"./Pixel/Pixel\";\r\n\r\nconst Board = () => {\r\n  const [isDraw, setIsDraw] = useState(false);\r\n  const { artsState, artsDispatch } = useContext(ArtsContext)!;\r\n  const [draggedPixels, setDraggedPixels] = useState<null | {\r\n    x: number;\r\n    y: number;\r\n  }>(null);\r\n  const boardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (artsState.chosen === null) {\r\n      const rows = createArt(artsState.settings!);\r\n      artsDispatch({\r\n        type: \"ADD_ART\",\r\n        data: {\r\n          rows: rows,\r\n          id: artsState.arts.length,\r\n        },\r\n      });\r\n    }\r\n  }, [artsDispatch, artsState.settings, artsState]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mouseup\", onMouseUp);\r\n    document.addEventListener(\"dragstart\", (e) => e.preventDefault());\r\n  }, []);\r\n\r\n  const onMouseDown = () => {\r\n    setIsDraw(true);\r\n  };\r\n\r\n  const onMouseUp = () => {\r\n    setIsDraw(false);\r\n    setDraggedPixels(null);\r\n  };\r\n\r\n  const pixelClickedHandler = (xpos: number, ypos: number, color: string) => {\r\n    return ((e) => {\r\n      e.preventDefault();\r\n\r\n      switch (artsState.settings!.tool) {\r\n        case \"BRUSH\":\r\n          if (color === artsState.settings!.color) return;\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: artsState.chosen!,\r\n            data: artsState.settings!.color,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"ERASER\":\r\n          if (color === artsState.settings!.defColor) return;\r\n          artsDispatch({\r\n            type: \"SET_PIX\",\r\n            artId: artsState.chosen!,\r\n            data: artsState.settings!.defColor,\r\n            x: xpos,\r\n            y: ypos,\r\n          });\r\n          break;\r\n        case \"FILL\":\r\n          const art: Art = JSON.parse(\r\n            JSON.stringify(\r\n              artsState.arts.find((art) => art.id === artsState.chosen)\r\n            )\r\n          );\r\n          const fillPix = (x: number, y: number) => {\r\n            const checkPix = (xp: number, yp: number): boolean => {\r\n              if (\r\n                yp > art.rows.length - 1 ||\r\n                yp < 0 ||\r\n                xp > art.rows[yp].length ||\r\n                xp < 0\r\n              )\r\n                return false;\r\n              const pix = art.rows[yp][xp];\r\n              if (!pix) return false;\r\n              const colorP = pix.color;\r\n              return colorP !== artsState.settings!.color && colorP === color;\r\n            };\r\n            art.rows[y][x].color = artsState.settings!.color;\r\n\r\n            if (checkPix(x + 1, y)) {\r\n              fillPix(x + 1, y);\r\n            }\r\n            if (checkPix(x, y + 1)) {\r\n              fillPix(x, y + 1);\r\n            }\r\n            if (checkPix(x, y - 1)) {\r\n              fillPix(x, y - 1);\r\n            }\r\n            if (checkPix(x - 1, y)) {\r\n              fillPix(x - 1, y);\r\n            }\r\n          };\r\n          fillPix(xpos, ypos);\r\n          artsDispatch({\r\n            type: \"UPD_ART\",\r\n            artId: artsState.chosen!,\r\n            data: art,\r\n          });\r\n          break;\r\n        case \"PIPETTE\":\r\n          artsDispatch!({ type: \"SET_COLOR\", data: color });\r\n          break;\r\n        case \"MOVE\":\r\n          console.log(\"move event\");\r\n          let dragPix = draggedPixels;\r\n          if (!dragPix) {\r\n            setDraggedPixels({ x: xpos, y: ypos });\r\n            dragPix = { x: xpos, y: ypos };\r\n          }\r\n          let x = xpos - dragPix!.x;\r\n          let y = ypos - dragPix!.y;\r\n          if (x > 0) {\r\n            x = Math.floor(x / 2);\r\n          } else {\r\n            x = Math.ceil(x / 2);\r\n          }\r\n          if (y > 0) {\r\n            y = Math.floor(y / 2);\r\n          } else {\r\n            y = Math.ceil(y / 2);\r\n          }\r\n\r\n          if (Math.abs(x) === 1) {\r\n            setDraggedPixels({ x: xpos, y: draggedPixels!.y });\r\n          }\r\n          if (Math.abs(y) === 1) {\r\n            setDraggedPixels({ x: draggedPixels!.x, y: ypos });\r\n          }\r\n          const newArt = JSON.parse(\r\n            JSON.stringify(\r\n              artsState.arts.find((art) => art.id === artsState.chosen)\r\n            )\r\n          ) as Art;\r\n          newArt.rows.forEach((row, ind) => {\r\n            row.forEach((pix) => {\r\n              const newX = pix.xpos + x;\r\n              const newY = pix.ypos + y;\r\n              pix.xpos =\r\n                newX > row.length - 1\r\n                  ? newX - row.length\r\n                  : newX < 0\r\n                  ? row.length + newX\r\n                  : newX;\r\n              pix.ypos =\r\n                newY > newArt.rows.length - 1\r\n                  ? newY - newArt.rows.length\r\n                  : newY < 0\r\n                  ? newArt.rows.length + newY\r\n                  : newY;\r\n            });\r\n            if (x > 0) {\r\n              newArt.rows[ind] = row\r\n                .slice(row.length - x)\r\n                .concat(row.slice(0, row.length - x));\r\n            } else {\r\n              newArt.rows[ind] = row\r\n                .slice(Math.abs(x))\r\n                .concat(row.slice(0, Math.abs(x)));\r\n            }\r\n          });\r\n          if (y > 0) {\r\n            newArt.rows = newArt.rows\r\n              .slice(newArt.rows.length - y)\r\n              .concat(newArt.rows.slice(0, newArt.rows.length - y));\r\n          } else {\r\n            newArt.rows = newArt.rows\r\n              .slice(Math.abs(y))\r\n              .concat(newArt.rows.slice(0, Math.abs(y)));\r\n          }\r\n          artsDispatch({\r\n            type: \"UPD_ART\",\r\n            data: newArt,\r\n            artId: artsState.chosen!,\r\n          });\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }) as MouseEventHandler<HTMLDivElement>;\r\n  };\r\n\r\n  let art: null | Art = null;\r\n\r\n  if (artsState.arts.length) {\r\n    art = artsState.arts!.find((art) => art.id === artsState.chosen)!;\r\n  }\r\n\r\n  const ps = 500 / artsState.settings!.columnSize;\r\n  return (\r\n    <div ref={boardRef} className={classes.Board}>\r\n      {art &&\r\n        art.rows.map((arr) => {\r\n          return arr.map((pixel) => (\r\n            <Pixel\r\n              isDrawing={isDraw}\r\n              size={ps}\r\n              clicked={pixelClickedHandler}\r\n              dragStarted={onMouseDown}\r\n              key={pixel.ypos.toString() + pixel.xpos}\r\n              {...pixel}\r\n            />\r\n          ));\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}