{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\src\\\\components\\\\ToolsBar\\\\SaveImage\\\\SaveImage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef } from \"react\";\nimport classes from \"./SaveImage.module.css\";\nimport { ArtsContext } from \"../../../context/arts-context\";\nimport { SettingsContext } from \"../../../context/settings-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SaveImage = () => {\n  _s();\n\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    arts\n  } = useContext(ArtsContext);\n  const socket = useRef(null);\n  useEffect(() => {\n    const s = new WebSocket(\"ws://localhost:3001\");\n\n    s.onopen = e => {\n      console.log(\"connection\");\n    };\n\n    s.onmessage = function (e) {\n      console.log(e);\n\n      if (JSON.parse(e.data).data) {\n        fetch.get(\"http://localhost:3001/img.png\").then(res => {\n          return res.json();\n        }).then(data => {\n          console.log(data);\n        }).catch(err => {\n          console.log(err.message);\n        });\n      }\n    };\n\n    socket.current = s;\n  }, []);\n\n  const onSaveImage = e => {\n    e.preventDefault();\n    const art = arts.arts.find(art => art.id === arts.chosen);\n    socket.current.send(JSON.stringify({\n      img: art,\n      cs: settings.columnSize,\n      rs: settings.rowSize,\n      dc: settings.defColor\n    })); // setImg(art);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSaveImage,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: classes.SaveImage,\n      children: \"SAVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SaveImage, \"havHF2X55dtIC6cq5zxDBW40SYs=\");\n\n_c = SaveImage;\nexport default SaveImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveImage\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/src/components/ToolsBar/SaveImage/SaveImage.tsx"],"names":["useContext","useEffect","useRef","classes","ArtsContext","SettingsContext","SaveImage","settings","arts","socket","s","WebSocket","onopen","e","console","log","onmessage","JSON","parse","data","fetch","get","then","res","json","catch","err","message","current","onSaveImage","preventDefault","art","find","id","chosen","send","stringify","img","cs","columnSize","rs","rowSize","dc","defColor"],"mappings":";;;AAAA,SAGEA,UAHF,EAIEC,SAJF,EAKEC,MALF,QAOO,OAPP;AASA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAcC,WAAd,QAAiC,+BAAjC;AACA,SAASC,eAAT,QAAgC,mCAAhC;;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAeP,UAAU,CAACK,eAAD,CAA/B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWR,UAAU,CAACI,WAAD,CAA3B;AACA,QAAMK,MAAM,GAAGP,MAAM,CAAmB,IAAnB,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,CAAC,GAAG,IAAIC,SAAJ,CAAc,qBAAd,CAAV;;AACAD,IAAAA,CAAC,CAACE,MAAF,GAAYC,CAAD,IAAO;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,KAFD;;AAGAL,IAAAA,CAAC,CAACM,SAAF,GAAc,UAAUH,CAAV,EAAa;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,UAAII,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACM,IAAb,EAAmBA,IAAvB,EAA6B;AAC3BC,QAAAA,KAAK,CACFC,GADH,CACO,+BADP,EAEGC,IAFH,CAESC,GAAD,IAAS;AACb,iBAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,SAJH,EAKGF,IALH,CAKSH,IAAD,IAAU;AACdL,UAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACD,SAPH,EAQGM,KARH,CAQUC,GAAD,IAAS;AACdZ,UAAAA,OAAO,CAACC,GAAR,CAAYW,GAAG,CAACC,OAAhB;AACD,SAVH;AAWD;AACF,KAfD;;AAgBAlB,IAAAA,MAAM,CAACmB,OAAP,GAAiBlB,CAAjB;AACD,GAtBQ,EAsBN,EAtBM,CAAT;;AAwBA,QAAMmB,WAA6B,GAAIhB,CAAD,IAAO;AAC3CA,IAAAA,CAAC,CAACiB,cAAF;AACA,UAAMC,GAAG,GAAGvB,IAAI,CAACA,IAAL,CAAUwB,IAAV,CAAgBD,GAAD,IAASA,GAAG,CAACE,EAAJ,KAAWzB,IAAI,CAAC0B,MAAxC,CAAZ;AACAzB,IAAAA,MAAM,CAACmB,OAAP,CAAgBO,IAAhB,CACElB,IAAI,CAACmB,SAAL,CAAe;AACbC,MAAAA,GAAG,EAAEN,GADQ;AAEbO,MAAAA,EAAE,EAAE/B,QAAQ,CAAEgC,UAFD;AAGbC,MAAAA,EAAE,EAAEjC,QAAQ,CAAEkC,OAHD;AAIbC,MAAAA,EAAE,EAAEnC,QAAQ,CAAEoC;AAJD,KAAf,CADF,EAH2C,CAW3C;AACD,GAZD;;AAcA,sBACE;AAAM,IAAA,QAAQ,EAAEd,WAAhB;AAAA,2BACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAE1B,OAAO,CAACG,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAtDD;;GAAMA,S;;KAAAA,S;AAwDN,eAAeA,SAAf","sourcesContent":["import {\r\n  FormEventHandler,\r\n  MutableRefObject,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport classes from \"./SaveImage.module.css\";\r\nimport { Art, ArtsContext } from \"../../../context/arts-context\";\r\nimport { SettingsContext } from \"../../../context/settings-context\";\r\nimport { createCanvas } from \"canvas\";\r\n\r\nconst SaveImage = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const { arts } = useContext(ArtsContext)!;\r\n  const socket = useRef<null | WebSocket>(null);\r\n\r\n  useEffect(() => {\r\n    const s = new WebSocket(\"ws://localhost:3001\");\r\n    s.onopen = (e) => {\r\n      console.log(\"connection\");\r\n    };\r\n    s.onmessage = function (e) {\r\n      console.log(e);\r\n      if (JSON.parse(e.data).data) {\r\n        fetch\r\n          .get(\"http://localhost:3001/img.png\")\r\n          .then((res) => {\r\n            return res.json();\r\n          })\r\n          .then((data) => {\r\n            console.log(data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.message);\r\n          });\r\n      }\r\n    };\r\n    socket.current = s;\r\n  }, []);\r\n\r\n  const onSaveImage: FormEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const art = arts.arts.find((art) => art.id === arts.chosen)!;\r\n    socket.current!.send(\r\n      JSON.stringify({\r\n        img: art,\r\n        cs: settings!.columnSize,\r\n        rs: settings!.rowSize,\r\n        dc: settings!.defColor,\r\n      })\r\n    );\r\n    // setImg(art);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSaveImage}>\r\n      <button type=\"submit\" className={classes.SaveImage}>\r\n        SAVE\r\n      </button>\r\n      {/* <input type=\"hidden\" name=\"img\" value={JSON.stringify(img)} />\r\n      <input type=\"hidden\" name=\"cs\" value={settings!.columnSize} />\r\n      <input type=\"hidden\" name=\"rs\" value={settings!.rowSize} />\r\n      <input type=\"hidden\" name=\"dc\" value={settings!.defColor} /> */}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SaveImage;\r\n"]},"metadata":{},"sourceType":"module"}