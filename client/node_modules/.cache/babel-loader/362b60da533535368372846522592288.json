{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pechenka\\\\pixel-app-ts\\\\client\\\\src\\\\components\\\\UploadImage\\\\UploadImage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArtsContext } from \"../../context/arts-context\";\nimport Button from \"../UI/Button/Button\";\nimport Modal from \"../UI/Modal/Modal\";\nimport classes from \"./UploadImage.module.css\";\nimport SizeToggle from \"../SettingsBar/SizeToggle/SizeToggle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UploadImage = () => {\n  _s();\n\n  const {\n    artsState,\n    artsDispatch\n  } = useContext(ArtsContext);\n  const [showModal, setShowModal] = useState(false);\n  const [isSelected, setIsSelected] = useState(false);\n  const [file, setFile] = useState(null);\n  const [imgIsValid, setImgIsValid] = useState(false);\n  const [newPixelSize, setNewPixelSize] = useState(1);\n  const [origSize, setOrigSize] = useState({\n    a: 0,\n    b: 0\n  });\n  const [frameSize, setFrameSize] = useState({\n    a: 0,\n    b: 0\n  });\n  const fileInpRef = useRef(null);\n  const imgRef = useRef(null);\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    axios({\n      method: \"post\",\n      url: \"/upl-img\",\n      data: formData,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(data => {\n      onCloseModal();\n      artsDispatch({\n        type: \"ADD_ART\",\n        data: {\n          id: artsState.arts.length,\n          rows: data.data\n        }\n      });\n      artsDispatch({\n        type: \"SET_PS\",\n        data: newPixelSize\n      });\n    }).catch(err => {});\n  };\n\n  const onShowModal = () => {\n    setShowModal(true);\n  };\n\n  const onCloseModal = () => {\n    setShowModal(false);\n    setIsSelected(false);\n    setFile(null);\n  };\n\n  const onBrowseImg = () => {\n    fileInpRef.current.click();\n    setIsSelected(true);\n  };\n\n  const validateSize = s => {\n    var _imgRef$current, _imgRef$current2;\n\n    const width = (_imgRef$current = imgRef.current) === null || _imgRef$current === void 0 ? void 0 : _imgRef$current.offsetWidth;\n    const height = (_imgRef$current2 = imgRef.current) === null || _imgRef$current2 === void 0 ? void 0 : _imgRef$current2.offsetHeight;\n    const frameWidth = width / s;\n    const frameHeight = height / s;\n    let valid = true;\n    valid = valid && width % s === 0;\n    valid = valid && height % s === 0;\n    setFrameSize({\n      a: frameWidth,\n      b: frameHeight\n    });\n    setImgIsValid(valid);\n  };\n\n  const onChosedFile = () => {\n    setFile(window.URL.createObjectURL(fileInpRef.current.files[0]));\n    setOrigSize({\n      a: 0,\n      b: 0\n    });\n    setFrameSize({\n      a: 0,\n      b: 0\n    });\n  };\n\n  const onAddPixelSize = () => {\n    setNewPixelSize(prevPixelSize => prevPixelSize + 1);\n    validateSize(newPixelSize + 1);\n  };\n\n  const onSubPixelSize = () => {\n    setNewPixelSize(prevPixelSize => prevPixelSize - 1 || 1);\n    validateSize(newPixelSize - 1 || 1);\n  };\n\n  const imgOnLoad = e => {\n    if (!origSize.a || !origSize.b) {\n      setOrigSize({\n        a: e.target.width,\n        b: e.target.height\n      });\n      validateSize(newPixelSize);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      type: \"button\",\n      clicked: onShowModal,\n      children: \"LOAD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      closed: onCloseModal,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBrowseImg,\n        className: classes.BrowseButton,\n        children: \"BROWSE...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"/upl-img\",\n        method: \"post\",\n        encType: \"multipart/form-data\",\n        onSubmit: onSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: onChosedFile,\n          type: \"file\",\n          name: \"img\",\n          style: {\n            display: \"none\"\n          },\n          ref: fileInpRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), isSelected && file ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.ImgContainer,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: file,\n              onLoad: imgOnLoad,\n              alt: \"\",\n              ref: imgRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.LoadPlace,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                textAlign: \"center\",\n                marginBottom: \"10px\"\n              },\n              children: [\"Original: \", origSize.a, \" x \", origSize.b]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                textAlign: \"center\",\n                marginBottom: \"10px\"\n              },\n              children: [\"Frame Size:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: imgIsValid ? \"#000\" : \"red\"\n                },\n                children: frameSize.a\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this), \" \", \"x\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: imgIsValid ? \"#000\" : \"red\"\n                },\n                children: frameSize.b\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.Togglers,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.Toggler,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Pixel Size\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(SizeToggle, {\n                  del: onSubPixelSize,\n                  add: onAddPixelSize,\n                  cur: newPixelSize\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !imgIsValid,\n            type: \"submit\",\n            className: classes.UploadButton,\n            children: \"UPLOAD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"hidden\",\n            name: \"ps\",\n            value: newPixelSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"hidden\",\n            value: artsState.settings.defColor,\n            name: \"dc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UploadImage, \"2hSb24zdLEP0OaXMYVLt6m8VcM8=\");\n\n_c = UploadImage;\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["C:/Users/Pechenka/pixel-app-ts/client/src/components/UploadImage/UploadImage.tsx"],"names":["useContext","useRef","useState","axios","ArtsContext","Button","Modal","classes","SizeToggle","UploadImage","artsState","artsDispatch","showModal","setShowModal","isSelected","setIsSelected","file","setFile","imgIsValid","setImgIsValid","newPixelSize","setNewPixelSize","origSize","setOrigSize","a","b","frameSize","setFrameSize","fileInpRef","imgRef","onSubmitHandler","e","preventDefault","formData","FormData","target","method","url","data","headers","then","onCloseModal","type","id","arts","length","rows","catch","err","onShowModal","onBrowseImg","current","click","validateSize","s","width","offsetWidth","height","offsetHeight","frameWidth","frameHeight","valid","onChosedFile","window","URL","createObjectURL","files","onAddPixelSize","prevPixelSize","onSubPixelSize","imgOnLoad","BrowseButton","display","ImgContainer","LoadPlace","textAlign","marginBottom","color","Togglers","Toggler","UploadButton","settings","defColor"],"mappings":"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","sourcesContent":["import {\r\n  FormEventHandler,\r\n  MouseEventHandler,\r\n  useContext,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { ArtsContext } from \"../../context/arts-context\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport Modal from \"../UI/Modal/Modal\";\r\nimport classes from \"./UploadImage.module.css\";\r\nimport SizeToggle from \"../SettingsBar/SizeToggle/SizeToggle\";\r\n\r\nconst UploadImage = () => {\r\n  const { artsState, artsDispatch } = useContext(ArtsContext)!;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [isSelected, setIsSelected] = useState(false);\r\n  const [file, setFile] = useState<null | string>(null);\r\n  const [imgIsValid, setImgIsValid] = useState(false);\r\n  const [newPixelSize, setNewPixelSize] = useState(1);\r\n  const [origSize, setOrigSize] = useState({ a: 0, b: 0 });\r\n  const [frameSize, setFrameSize] = useState({ a: 0, b: 0 });\r\n  const fileInpRef = useRef<null | HTMLInputElement>(null);\r\n  const imgRef = useRef<null | HTMLImageElement>(null);\r\n\r\n  const onSubmitHandler: FormEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target as HTMLFormElement);\r\n    axios({\r\n      method: \"post\",\r\n      url: \"/upl-img\",\r\n      data: formData,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    })\r\n      .then((data) => {\r\n        onCloseModal();\r\n        artsDispatch({\r\n          type: \"ADD_ART\",\r\n          data: { id: artsState.arts.length, rows: data.data },\r\n        });\r\n        artsDispatch({ type: \"SET_PS\", data: newPixelSize });\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  const onShowModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setShowModal(false);\r\n    setIsSelected(false);\r\n    setFile(null);\r\n  };\r\n\r\n  const onBrowseImg = () => {\r\n    fileInpRef.current!.click();\r\n    setIsSelected(true);\r\n  };\r\n\r\n  const validateSize = (s: number) => {\r\n    const width = imgRef.current?.offsetWidth!;\r\n    const height = imgRef.current?.offsetHeight!;\r\n    const frameWidth = width / s;\r\n    const frameHeight = height / s;\r\n    let valid = true;\r\n    valid = valid && width % s === 0;\r\n    valid = valid && height % s === 0;\r\n    setFrameSize({ a: frameWidth, b: frameHeight });\r\n    setImgIsValid(valid);\r\n  };\r\n\r\n  const onChosedFile = () => {\r\n    setFile(window.URL.createObjectURL(fileInpRef.current!.files![0]));\r\n    setOrigSize({ a: 0, b: 0 });\r\n    setFrameSize({ a: 0, b: 0 });\r\n  };\r\n\r\n  const onAddPixelSize: MouseEventHandler = () => {\r\n    setNewPixelSize((prevPixelSize) => prevPixelSize + 1);\r\n    validateSize(newPixelSize + 1);\r\n  };\r\n\r\n  const onSubPixelSize: MouseEventHandler = () => {\r\n    setNewPixelSize((prevPixelSize) => prevPixelSize - 1 || 1);\r\n    validateSize(newPixelSize - 1 || 1);\r\n  };\r\n\r\n  const imgOnLoad: React.ReactEventHandler<HTMLImageElement> = (e) => {\r\n    if (!origSize.a || !origSize.b) {\r\n      setOrigSize({\r\n        a: (e.target as HTMLImageElement).width,\r\n        b: (e.target as HTMLImageElement).height,\r\n      });\r\n      validateSize(newPixelSize);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"button\" clicked={onShowModal}>\r\n        LOAD\r\n      </Button>\r\n      {showModal && (\r\n        <Modal closed={onCloseModal}>\r\n          <button onClick={onBrowseImg} className={classes.BrowseButton}>\r\n            BROWSE...\r\n          </button>\r\n\r\n          <form\r\n            action=\"/upl-img\"\r\n            method=\"post\"\r\n            encType=\"multipart/form-data\"\r\n            onSubmit={onSubmitHandler}\r\n          >\r\n            <input\r\n              onChange={onChosedFile}\r\n              type=\"file\"\r\n              name=\"img\"\r\n              style={{ display: \"none\" }}\r\n              ref={fileInpRef}\r\n            />\r\n            {isSelected && file ? (\r\n              <>\r\n                <div className={classes.ImgContainer}>\r\n                  <img src={file} onLoad={imgOnLoad} alt=\"\" ref={imgRef} />\r\n                </div>\r\n                <div className={classes.LoadPlace}>\r\n                  <p style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\r\n                    Original: {origSize.a} x {origSize.b}\r\n                  </p>\r\n                  <p style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\r\n                    Frame Size:{\" \"}\r\n                    <span style={{ color: imgIsValid ? \"#000\" : \"red\" }}>\r\n                      {frameSize.a}\r\n                    </span>{\" \"}\r\n                    x{\" \"}\r\n                    <span style={{ color: imgIsValid ? \"#000\" : \"red\" }}>\r\n                      {frameSize.b}\r\n                    </span>\r\n                  </p>\r\n                  <div className={classes.Togglers}>\r\n                    <div className={classes.Toggler}>\r\n                      <p>Pixel Size</p>\r\n                      <SizeToggle\r\n                        del={onSubPixelSize}\r\n                        add={onAddPixelSize}\r\n                        cur={newPixelSize}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  disabled={!imgIsValid}\r\n                  type=\"submit\"\r\n                  className={classes.UploadButton}\r\n                >\r\n                  UPLOAD\r\n                </button>\r\n                <input type=\"hidden\" name=\"ps\" value={newPixelSize} />\r\n                <input\r\n                  type=\"hidden\"\r\n                  value={artsState.settings.defColor}\r\n                  name=\"dc\"\r\n                />\r\n              </>\r\n            ) : null}\r\n          </form>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadImage;\r\n"]},"metadata":{},"sourceType":"module"}